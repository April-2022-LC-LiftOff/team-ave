{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform'; // Boilerplate for applying mixins to MatToolbar.\n\n/** @docs-private */\n\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\n\nconst _MatToolbarBase = mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n});\n\nclass MatToolbarRow {}\n\nMatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) {\n  return new (t || MatToolbarRow)();\n};\n\nMatToolbarRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatToolbarRow,\n  selectors: [[\"mat-toolbar-row\"]],\n  hostAttrs: [1, \"mat-toolbar-row\"],\n  exportAs: [\"matToolbarRow\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatToolbarRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-toolbar-row',\n      exportAs: 'matToolbarRow',\n      host: {\n        'class': 'mat-toolbar-row'\n      }\n    }]\n  }], null, null);\n})();\n\nclass MatToolbar extends _MatToolbarBase {\n  constructor(elementRef, _platform, document) {\n    super(elementRef);\n    this._platform = _platform; // TODO: make the document a required param when doing breaking changes.\n\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._checkToolbarMixedModes();\n\n      this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n    }\n  }\n  /**\r\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\r\n   */\n\n\n  _checkToolbarMixedModes() {\n    if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n      const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(node => !(node.classList && node.classList.contains('mat-toolbar-row'))).filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)).some(node => !!(node.textContent && node.textContent.trim()));\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }\n\n}\n\nMatToolbar.ɵfac = function MatToolbar_Factory(t) {\n  return new (t || MatToolbar)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatToolbar.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatToolbar,\n  selectors: [[\"mat-toolbar\"]],\n  contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatToolbarRow, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-toolbar\"],\n  hostVars: 4,\n  hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  exportAs: [\"matToolbar\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 0,\n  template: function MatToolbar_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵprojection(0);\n      i0.ɵɵprojection(1, 1);\n    }\n  },\n  styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatToolbar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-toolbar',\n      exportAs: 'matToolbar',\n      inputs: ['color'],\n      host: {\n        'class': 'mat-toolbar',\n        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n      styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    _toolbarRows: [{\n      type: ContentChildren,\n      args: [MatToolbarRow, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\r\n * Throws an exception when attempting to combine the different toolbar row modes.\r\n * @docs-private\r\n */\n\n\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass MatToolbarModule {}\n\nMatToolbarModule.ɵfac = function MatToolbarModule_Factory(t) {\n  return new (t || MatToolbarModule)();\n};\n\nMatToolbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatToolbarModule\n});\nMatToolbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatToolbarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n      declarations: [MatToolbar, MatToolbarRow]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };","map":{"version":3,"sources":["C:/Users/theet/Desktop/liftoff_capstone/team-ave/frontend/node_modules/@angular/material/fesm2015/toolbar.mjs"],"names":["i0","Directive","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","ContentChildren","NgModule","mixinColor","MatCommonModule","DOCUMENT","i1","_MatToolbarBase","constructor","_elementRef","MatToolbarRow","ɵfac","ɵdir","type","args","selector","exportAs","host","MatToolbar","elementRef","_platform","document","_document","ngAfterViewInit","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","ngDevMode","isCombinedUsage","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","ElementRef","Platform","ɵcmp","inputs","changeDetection","OnPush","encapsulation","None","template","styles","undefined","decorators","descendants","Error","MatToolbarModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, ContentChildren, NgModule } from '@angular/core';\r\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport * as i1 from '@angular/cdk/platform';\r\n\r\n// Boilerplate for applying mixins to MatToolbar.\r\n/** @docs-private */\r\nconst _MatToolbarBase = mixinColor(class {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n});\r\nclass MatToolbarRow {\r\n}\r\nMatToolbarRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbarRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nMatToolbarRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatToolbarRow, selector: \"mat-toolbar-row\", host: { classAttribute: \"mat-toolbar-row\" }, exportAs: [\"matToolbarRow\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbarRow, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-toolbar-row',\r\n                    exportAs: 'matToolbarRow',\r\n                    host: { 'class': 'mat-toolbar-row' },\r\n                }]\r\n        }] });\r\nclass MatToolbar extends _MatToolbarBase {\r\n    constructor(elementRef, _platform, document) {\r\n        super(elementRef);\r\n        this._platform = _platform;\r\n        // TODO: make the document a required param when doing breaking changes.\r\n        this._document = document;\r\n    }\r\n    ngAfterViewInit() {\r\n        if (this._platform.isBrowser) {\r\n            this._checkToolbarMixedModes();\r\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\r\n        }\r\n    }\r\n    /**\r\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\r\n     */\r\n    _checkToolbarMixedModes() {\r\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            // Check if there are any other DOM nodes that can display content but aren't inside of\r\n            // a <mat-toolbar-row> element.\r\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\r\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\r\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\r\n                .some(node => !!(node.textContent && node.textContent.trim()));\r\n            if (isCombinedUsage) {\r\n                throwToolbarMixedModesError();\r\n            }\r\n        }\r\n    }\r\n}\r\nMatToolbar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbar, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });\r\nMatToolbar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatToolbar, selector: \"mat-toolbar\", inputs: { color: \"color\" }, host: { properties: { \"class.mat-toolbar-multiple-rows\": \"_toolbarRows.length > 0\", \"class.mat-toolbar-single-row\": \"_toolbarRows.length === 0\" }, classAttribute: \"mat-toolbar\" }, queries: [{ propertyName: \"_toolbarRows\", predicate: MatToolbarRow, descendants: true }], exportAs: [\"matToolbar\"], usesInheritance: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbar, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-toolbar', exportAs: 'matToolbar', inputs: ['color'], host: {\r\n                        'class': 'mat-toolbar',\r\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\r\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\r\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [DOCUMENT]\r\n                    }] }];\r\n    }, propDecorators: { _toolbarRows: [{\r\n                type: ContentChildren,\r\n                args: [MatToolbarRow, { descendants: true }]\r\n            }] } });\r\n/**\r\n * Throws an exception when attempting to combine the different toolbar row modes.\r\n * @docs-private\r\n */\r\nfunction throwToolbarMixedModesError() {\r\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\r\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\r\n        'inside of a `<mat-toolbar>` for a single row.');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatToolbarModule {\r\n}\r\nMatToolbarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMatToolbarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbarModule, declarations: [MatToolbar, MatToolbarRow], imports: [MatCommonModule], exports: [MatToolbar, MatToolbarRow, MatCommonModule] });\r\nMatToolbarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbarModule, imports: [[MatCommonModule], MatCommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatToolbarModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [MatCommonModule],\r\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\r\n                    declarations: [MatToolbar, MatToolbarRow],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\r\n\n"]},"metadata":{},"sourceType":"module"}