{"ast":null,"code":"import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\n\nconst _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nclass MatAutocompleteSelectedEvent {\n  constructor(\n  /** Reference to the autocomplete panel that emitted the event. */\n  source,\n  /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n\n} // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n  constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`; // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n\n    this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /** Whether the autocomplete panel is open. */\n\n\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\n\n\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\n\n\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n\n    this._elementRef.nativeElement.className = '';\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      if (this.isOpen) {\n        this.optionActivated.emit({\n          source: this,\n          option: this.options.toArray()[index] || null\n        });\n      }\n    }); // Set the initial visibility state.\n\n    this._setVisibility();\n  }\n\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\n\n\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n\n\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n\n\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n\n    this._setVisibilityClasses(this._classList);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n\n\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n\n\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n\n}\n\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n  return new (t || _MatAutocompleteBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i1.Platform));\n};\n\n_MatAutocompleteBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteBase,\n  viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 7);\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    panelWidth: \"panelWidth\",\n    classList: [\"class\", \"classList\"]\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\",\n    optionActivated: \"optionActivated\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i1.Platform\n    }];\n  }, {\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    panelWidth: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }]\n  });\n})();\n\nclass MatAutocomplete extends _MatAutocompleteBase {\n  constructor() {\n    super(...arguments);\n    this._visibleClass = 'mat-autocomplete-visible';\n    this._hiddenClass = 'mat-autocomplete-hidden';\n  }\n\n}\n\nMatAutocomplete.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocomplete_BaseFactory;\n  return function MatAutocomplete_Factory(t) {\n    return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n  };\n}();\n\nMatAutocomplete.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    }\n  },\n  directives: [i2.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\n\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n * @docs-private\r\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nclass _MatAutocompleteTriggerBase {\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\r\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\r\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\r\n     * comes back.\r\n     */\n\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n\n    this._closeKeyEventStream = new Subject();\n    /**\r\n     * Event handler for when the window is blurred. Needs to be an\r\n     * arrow function in order to preserve the context.\r\n     */\n\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n\n\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n\n\n    this._onTouched = () => {};\n    /**\r\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\r\n     * will render the panel underneath the trigger if there is enough space for it to fit in\r\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\r\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\r\n     * whether it fits completely in the viewport.\r\n     */\n\n\n    this.position = 'auto';\n    /**\r\n     * `autocomplete` attribute to be set on the input element.\r\n     * @docs-private\r\n     */\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of changes to the selection state of the autocomplete options. */\n\n    this.optionSelections = defer(() => {\n      const options = this.autocomplete ? this.autocomplete.options : null;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\r\n   * Whether the autocomplete is disabled. When disabled, the element will\r\n   * act as a regular input and the user won't be able to open the panel.\r\n   */\n\n\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  ngAfterViewInit() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n\n    this._componentDestroyed = true;\n\n    this._destroyPanel();\n\n    this._closeKeyEventStream.complete();\n  }\n  /** Whether or not the autocomplete panel is open. */\n\n\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n\n\n  openPanel() {\n    this._attachOverlay();\n\n    this._floatLabel();\n  }\n  /** Closes the autocomplete suggestion panel. */\n\n\n  closePanel() {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      // The `NgZone.onStable` always emits outside of the Angular zone,\n      // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n      // We should manually run in Angular zone to update UI after panel closing.\n      this._zone.run(() => {\n        this.autocomplete.closed.emit();\n      });\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n\n      this._closingActionsSubscription.unsubscribe();\n    } // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\r\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n   * within the viewport.\r\n   */\n\n\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\n\n\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe( // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n\n\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n\n\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = _getEventTarget(event);\n\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && // Normally focus moves inside `mousedown` so this condition will almost always be\n      // true. Its main purpose is to handle the case where the input is focused from an\n      // outside click which propagates up to the `body` listener within the same sequence\n      // and causes the panel to close immediately (see #3106).\n      this._document.activeElement !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    Promise.resolve().then(() => this._setTriggerValue(value));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const hasModifier = hasModifierKey(event); // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n\n    if (keyCode === ESCAPE && !hasModifier) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n      this.activeOption._selectViaInteraction();\n\n      this._resetActiveItem();\n\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (keyCode === TAB || isArrowKey && !hasModifier && this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value; // Based on `NumberValueAccessor` from forms.\n\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    } // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n\n      this._attachOverlay();\n\n      this._floatLabel(true);\n    }\n  }\n\n  _handleClick() {\n    if (this._canOpen() && !this.panelOpen) {\n      this.openPanel();\n    }\n  }\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\n\n\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n\n\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\n\n\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0)); // When the zone is stable initially, and when the option list changes...\n\n    return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n      // the Angular zone. This will lead to change detection being called outside of the Angular\n      // zone and the `autocomplete.opened` will also emit outside of the Angular.\n      this._zone.run(() => {\n        const wasOpen = this.panelOpen;\n\n        this._resetActiveItem();\n\n        this.autocomplete._setVisibility();\n\n        this._changeDetectorRef.detectChanges();\n\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n          // event, because we may not have emitted it when the panel was attached. This\n          // can happen if the users opens the panel and there are no options, but the\n          // options come in slightly later or as a result of the value changing.\n\n\n          if (wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n          }\n        }\n      });\n\n      return this.panelClosingActions;\n    }), // when the first closing event occurs...\n    take(1)) // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /** Destroys the autocomplete suggestion panel. */\n\n\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n  }\n\n  _setTriggerValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n    const inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\n\n\n  _setValueAndClose(event) {\n    const source = event && event.source;\n\n    if (source) {\n      this._clearPreviousSelectedOption(source);\n\n      this._setTriggerValue(source.value);\n\n      this._onChange(source.value);\n\n      this.autocomplete._emitSelectEvent(source);\n\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\n\n\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  _attachOverlay() {\n    var _a;\n\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n          this._closeKeyEventStream.next();\n\n          this._resetActiveItem(); // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n\n\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n\n    this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  _getOverlayConfig() {\n    var _a;\n\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir,\n      panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n    });\n  }\n\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n    this._setStrategyPositions(strategy);\n\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n\n\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }]; // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n\n\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\n\n\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n\n    if (autocomplete.autoActiveFirstOption) {\n      // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n      // the former will find the next enabled option, if the first one is disabled.\n      autocomplete._keyManager.setFirstItemActive();\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n\n\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    var _a;\n\n    return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n  }\n  /** Scrolls to a particular option in the list. */\n\n\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n\n      if (option) {\n        const element = option._getHostElement();\n\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n\n}\n\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n  return new (t || _MatAutocompleteTriggerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n};\n\n_MatAutocompleteTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteTriggerBase,\n  inputs: {\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    position: [\"matAutocompletePosition\", \"position\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"],\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1$1.Overlay\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i2$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i3.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }]\n  });\n})();\n\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  constructor() {\n    super(...arguments);\n    this._aboveClass = 'mat-autocomplete-panel-above';\n  }\n\n}\n\nMatAutocompleteTrigger.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocompleteTrigger_BaseFactory;\n  return function MatAutocompleteTrigger_Factory(t) {\n    return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n  };\n}();\n\nMatAutocompleteTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostAttrs: [1, \"mat-autocomplete-trigger\"],\n  hostVars: 7,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"click\", function MatAutocompleteTrigger_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", ctx.autocompleteDisabled ? null : \"listbox\");\n    }\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        'class': 'mat-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick()'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nclass _MatAutocompleteOriginBase {\n  constructor(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n  return new (t || _MatAutocompleteOriginBase)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\n_MatAutocompleteOriginBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteOriginBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\r\n * Directive applied to an element to make it usable\r\n * as a connection point for an autocomplete panel.\r\n */\n\n\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\n\nMatAutocompleteOrigin.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocompleteOrigin_BaseFactory;\n  return function MatAutocompleteOrigin_Factory(t) {\n    return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n  };\n}();\n\nMatAutocompleteOrigin.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass MatAutocompleteModule {}\n\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\n\nMatAutocompleteModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"sources":["C:/Users/theet/Desktop/liftoff_capstone/team-ave/frontend/node_modules/@angular/material/fesm2015/autocomplete.mjs"],"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","i0","InjectionToken","EventEmitter","TemplateRef","Directive","Inject","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","i1","_getEventTarget","i2","DOCUMENT","CommonModule","i1$1","Overlay","OverlayConfig","OverlayModule","i3","CdkScrollableModule","hasModifierKey","ESCAPE","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","i4","MAT_FORM_FIELD","startWith","switchMap","take","filter","map","tap","delay","i2$1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_classList","id","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","_getPanelAriaLabelledby","labelId","ariaLabel","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","ChangeDetectorRef","ElementRef","Platform","ɵdir","type","undefined","decorators","args","template","static","panelWidth","MatAutocomplete","arguments","ɵcmp","provide","useExisting","NgClass","selector","encapsulation","None","changeDetection","OnPush","exportAs","inputs","host","providers","styles","optionGroups","descendants","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","changes","pipe","onSelectionChange","onStable","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","run","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","elementRef","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","hasModifier","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","_a","ngDevMode","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","ViewContainerRef","NgZone","Directionality","ViewportRuler","MatFormField","_MatAutocompleteOriginBase","MatAutocompleteOrigin","MatAutocompleteModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"AAAA,SAASA,0BAAT,QAA2C,mBAA3C;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,QAAyD,uBAAzD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,WAAvC,EAAoDC,SAApD,EAA+DC,MAA/D,EAAuEC,SAAvE,EAAkFC,KAAlF,EAAyFC,MAAzF,EAAiGC,SAAjG,EAA4GC,iBAA5G,EAA+HC,uBAA/H,EAAwJC,eAAxJ,EAAyKC,UAAzK,EAAqLC,QAArL,EAA+LC,IAA/L,EAAqMC,QAArM,QAAqN,eAArN;AACA,SAASC,kBAAT,EAA6BC,2BAA7B,EAA0DC,YAA1D,EAAwEC,SAAxE,EAAmFC,wBAAnF,EAA6GC,6BAA7G,EAA4IC,wBAA5I,EAAsKC,eAAtK,EAAuLC,eAAvL,QAA8M,wBAA9M;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,KAAvC,EAA8CC,EAA9C,EAAkDC,SAAlD,QAAmE,MAAnE;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,iBAAvC;AACA,OAAO,KAAKC,IAAZ,MAAsB,sBAAtB;AACA,SAASC,OAAT,EAAkBC,aAAlB,EAAiCC,aAAjC,QAAsD,sBAAtD;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,cAAT,EAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,QAAxC,EAAkDC,UAAlD,EAA8DC,GAA9D,QAAyE,uBAAzE;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,8BAApB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,GAA7C,EAAkDC,GAAlD,EAAuDC,KAAvD,QAAoE,gBAApE;AACA,OAAO,KAAKC,IAAZ,MAAsB,mBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;;;;AA0IuG5D,IAAAA,EA+C6e,+B;AA/C7eA,IAAAA,EA+C8uB,gB;AA/C9uBA,IAAAA,EA+C2wB,e;;;;;mBA/C3wBA,E;AAAAA,IAAAA,EA+CojB,0D;AA/CpjBA,IAAAA,EA+CwkB,uH;;;;;AAxL/qB,IAAI6D,4BAA4B,GAAG,CAAnC;AACA;;AACA,MAAMC,4BAAN,CAAmC;AAC/BC,EAAAA,WAAW;AACX;AACAC,EAAAA,MAFW;AAGX;AACAC,EAAAA,MAJW,EAIH;AACJ,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAR8B,C,CAUnC;;AACA;;;AACA,MAAMC,yBAAyB,GAAGjD,kBAAkB,CAAC,MAAM,EAAP,CAApD;AAEA;;;AACA,MAAMkD,gCAAgC,GAAG,IAAIlE,cAAJ,CAAmB,kCAAnB,EAAuD;AAC5FmE,EAAAA,UAAU,EAAE,MADgF;AAE5FC,EAAAA,OAAO,EAAEC;AAFmF,CAAvD,CAAzC;AAIA;;AACA,SAASA,wCAAT,GAAoD;AAChD,SAAO;AAAEC,IAAAA,qBAAqB,EAAE;AAAzB,GAAP;AACH;AACD;;;AACA,MAAMC,oBAAN,SAAmCN,yBAAnC,CAA6D;AACzDH,EAAAA,WAAW,CAACU,kBAAD,EAAqBC,WAArB,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsD;AAC7D;AACA,SAAKH,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKG,oBAAL,GAA4BnD,YAAY,CAACoD,KAAzC;AACA;;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA;;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA;;AACA,SAAKC,cAAL,GAAsB,IAAIhF,YAAJ,EAAtB;AACA;;AACA,SAAKiF,MAAL,GAAc,IAAIjF,YAAJ,EAAd;AACA;;AACA,SAAKkF,MAAL,GAAc,IAAIlF,YAAJ,EAAd;AACA;;AACA,SAAKmF,eAAL,GAAuB,IAAInF,YAAJ,EAAvB;AACA,SAAKoF,UAAL,GAAkB,EAAlB;AACA;;AACA,SAAKC,EAAL,GAAW,oBAAmB1B,4BAA4B,EAAG,EAA7D,CApB6D,CAqB7D;AACA;AACA;AACA;;AACA,SAAK2B,WAAL,GAAmB,CAACZ,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACa,MAA9D,KAAyE,KAA5F;AACA,SAAKC,sBAAL,GAA8B,CAAC,CAACf,QAAQ,CAACJ,qBAAzC;AACH;AACD;;;AACU,MAANoB,MAAM,GAAG;AACT,WAAO,KAAKX,OAAL,IAAgB,KAAKD,SAA5B;AACH;AACD;AACJ;AACA;AACA;;;AAC6B,MAArBR,qBAAqB,GAAG;AACxB,WAAO,KAAKmB,sBAAZ;AACH;;AACwB,MAArBnB,qBAAqB,CAACqB,KAAD,EAAQ;AAC7B,SAAKF,sBAAL,GAA8B5F,qBAAqB,CAAC8F,KAAD,CAAnD;AACH;AACD;AACJ;AACA;AACA;;;AACiB,MAATC,SAAS,CAACD,KAAD,EAAQ;AACjB,QAAIA,KAAK,IAAIA,KAAK,CAACE,MAAnB,EAA2B;AACvB,WAAKR,UAAL,GAAkBvF,iBAAiB,CAAC6F,KAAD,CAAjB,CAAyBG,MAAzB,CAAgC,CAACF,SAAD,EAAYG,SAAZ,KAA0B;AACxEH,QAAAA,SAAS,CAACG,SAAD,CAAT,GAAuB,IAAvB;AACA,eAAOH,SAAP;AACH,OAHiB,EAGf,EAHe,CAAlB;AAIH,KALD,MAMK;AACD,WAAKP,UAAL,GAAkB,EAAlB;AACH;;AACD,SAAKW,qBAAL,CAA2B,KAAKX,UAAhC;;AACA,SAAKZ,WAAL,CAAiBwB,aAAjB,CAA+BF,SAA/B,GAA2C,EAA3C;AACH;;AACDG,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,WAAL,GAAmB,IAAIvG,0BAAJ,CAA+B,KAAKwG,OAApC,EAA6CC,QAA7C,EAAnB;AACA,SAAKzB,oBAAL,GAA4B,KAAKuB,WAAL,CAAiBG,MAAjB,CAAwBC,SAAxB,CAAkCC,KAAK,IAAI;AACnE,UAAI,KAAKd,MAAT,EAAiB;AACb,aAAKN,eAAL,CAAqBqB,IAArB,CAA0B;AAAE1C,UAAAA,MAAM,EAAE,IAAV;AAAgBC,UAAAA,MAAM,EAAE,KAAKoC,OAAL,CAAaM,OAAb,GAAuBF,KAAvB,KAAiC;AAAzD,SAA1B;AACH;AACJ,KAJ2B,CAA5B,CAFiB,CAOjB;;AACA,SAAKG,cAAL;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,SAAKhC,oBAAL,CAA0BiC,WAA1B;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,aAAa,CAACC,SAAD,EAAY;AACrB,QAAI,KAAKC,KAAT,EAAgB;AACZ,WAAKA,KAAL,CAAWf,aAAX,CAAyBc,SAAzB,GAAqCA,SAArC;AACH;AACJ;AACD;;;AACAE,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKD,KAAL,GAAa,KAAKA,KAAL,CAAWf,aAAX,CAAyBc,SAAtC,GAAkD,CAAzD;AACH;AACD;;;AACAJ,EAAAA,cAAc,GAAG;AACb,SAAK7B,SAAL,GAAiB,CAAC,CAAC,KAAKsB,OAAL,CAAaP,MAAhC;;AACA,SAAKG,qBAAL,CAA2B,KAAKX,UAAhC;;AACA,SAAKb,kBAAL,CAAwB0C,YAAxB;AACH;AACD;;;AACAC,EAAAA,gBAAgB,CAACnD,MAAD,EAAS;AACrB,UAAMoD,KAAK,GAAG,IAAIvD,4BAAJ,CAAiC,IAAjC,EAAuCG,MAAvC,CAAd;AACA,SAAKiB,cAAL,CAAoBwB,IAApB,CAAyBW,KAAzB;AACH;AACD;;;AACAC,EAAAA,uBAAuB,CAACC,OAAD,EAAU;AAC7B,QAAI,KAAKC,SAAT,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,UAAMC,eAAe,GAAGF,OAAO,GAAGA,OAAO,GAAG,GAAb,GAAmB,EAAlD;AACA,WAAO,KAAKG,cAAL,GAAsBD,eAAe,GAAG,KAAKC,cAA7C,GAA8DH,OAArE;AACH;AACD;;;AACAtB,EAAAA,qBAAqB,CAACJ,SAAD,EAAY;AAC7BA,IAAAA,SAAS,CAAC,KAAK8B,aAAN,CAAT,GAAgC,KAAK5C,SAArC;AACAc,IAAAA,SAAS,CAAC,KAAK+B,YAAN,CAAT,GAA+B,CAAC,KAAK7C,SAArC;AACH;;AA7GwD;;AA+G7DP,oBAAoB,CAACqD,IAArB;AAAA,mBAAiHrD,oBAAjH,EAAuGxE,EAAvG,mBAAuJA,EAAE,CAAC8H,iBAA1J,GAAuG9H,EAAvG,mBAAwLA,EAAE,CAAC+H,UAA3L,GAAuG/H,EAAvG,mBAAkNmE,gCAAlN,GAAuGnE,EAAvG,mBAA+PgC,EAAE,CAACgG,QAAlQ;AAAA;;AACAxD,oBAAoB,CAACyD,IAArB,kBADuGjI,EACvG;AAAA,QAAqGwE,oBAArG;AAAA;AAAA;AADuGxE,MAAAA,EACvG,aAAwiBG,WAAxiB;AADuGH,MAAAA,EACvG;AAAA;;AAAA;AAAA;;AADuGA,MAAAA,EACvG,qBADuGA,EACvG;AADuGA,MAAAA,EACvG,qBADuGA,EACvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADuGA,EACvG;AAAA;;AACA;AAAA,qDAFuGA,EAEvG,mBAA2FwE,oBAA3F,EAA6H,CAAC;AAClH0D,IAAAA,IAAI,EAAE9H;AAD4G,GAAD,CAA7H,EAE4B,YAAY;AAChC,WAAO,CAAC;AAAE8H,MAAAA,IAAI,EAAElI,EAAE,CAAC8H;AAAX,KAAD,EAAiC;AAAEI,MAAAA,IAAI,EAAElI,EAAE,CAAC+H;AAAX,KAAjC,EAA0D;AAAEG,MAAAA,IAAI,EAAEC,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AACjFF,QAAAA,IAAI,EAAE7H,MAD2E;AAEjFgI,QAAAA,IAAI,EAAE,CAAClE,gCAAD;AAF2E,OAAD;AAA/B,KAA1D,EAGW;AAAE+D,MAAAA,IAAI,EAAElG,EAAE,CAACgG;AAAX,KAHX,CAAP;AAIH,GAPL,EAOuB;AAAEM,IAAAA,QAAQ,EAAE,CAAC;AACpBJ,MAAAA,IAAI,EAAE5H,SADc;AAEpB+H,MAAAA,IAAI,EAAE,CAAClI,WAAD,EAAc;AAAEoI,QAAAA,MAAM,EAAE;AAAV,OAAd;AAFc,KAAD,CAAZ;AAGPtB,IAAAA,KAAK,EAAE,CAAC;AACRiB,MAAAA,IAAI,EAAE5H,SADE;AAER+H,MAAAA,IAAI,EAAE,CAAC,OAAD;AAFE,KAAD,CAHA;AAMPb,IAAAA,SAAS,EAAE,CAAC;AACZU,MAAAA,IAAI,EAAE3H,KADM;AAEZ8H,MAAAA,IAAI,EAAE,CAAC,YAAD;AAFM,KAAD,CANJ;AASPX,IAAAA,cAAc,EAAE,CAAC;AACjBQ,MAAAA,IAAI,EAAE3H,KADW;AAEjB8H,MAAAA,IAAI,EAAE,CAAC,iBAAD;AAFW,KAAD,CATT;AAYPpD,IAAAA,WAAW,EAAE,CAAC;AACdiD,MAAAA,IAAI,EAAE3H;AADQ,KAAD,CAZN;AAcPgE,IAAAA,qBAAqB,EAAE,CAAC;AACxB2D,MAAAA,IAAI,EAAE3H;AADkB,KAAD,CAdhB;AAgBPiI,IAAAA,UAAU,EAAE,CAAC;AACbN,MAAAA,IAAI,EAAE3H;AADO,KAAD,CAhBL;AAkBP2E,IAAAA,cAAc,EAAE,CAAC;AACjBgD,MAAAA,IAAI,EAAE1H;AADW,KAAD,CAlBT;AAoBP2E,IAAAA,MAAM,EAAE,CAAC;AACT+C,MAAAA,IAAI,EAAE1H;AADG,KAAD,CApBD;AAsBP4E,IAAAA,MAAM,EAAE,CAAC;AACT8C,MAAAA,IAAI,EAAE1H;AADG,KAAD,CAtBD;AAwBP6E,IAAAA,eAAe,EAAE,CAAC;AAClB6C,MAAAA,IAAI,EAAE1H;AADY,KAAD,CAxBV;AA0BPqF,IAAAA,SAAS,EAAE,CAAC;AACZqC,MAAAA,IAAI,EAAE3H,KADM;AAEZ8H,MAAAA,IAAI,EAAE,CAAC,OAAD;AAFM,KAAD;AA1BJ,GAPvB;AAAA;;AAqCA,MAAMI,eAAN,SAA8BjE,oBAA9B,CAAmD;AAC/CT,EAAAA,WAAW,GAAG;AACV,UAAM,GAAG2E,SAAT;AACA,SAAKf,aAAL,GAAqB,0BAArB;AACA,SAAKC,YAAL,GAAoB,yBAApB;AACH;;AAL8C;;AAOnDa,eAAe,CAACZ,IAAhB;AAAA;AAAA;AAAA,4EA9CuG7H,EA8CvG,uBAA4GyI,eAA5G,SAA4GA,eAA5G;AAAA;AAAA;;AACAA,eAAe,CAACE,IAAhB,kBA/CuG3I,EA+CvG;AAAA,QAAgGyI,eAAhG;AAAA;AAAA;AAAA;AA/CuGzI,MAAAA,EA+CvG,0BAAmXmB,YAAnX;AA/CuGnB,MAAAA,EA+CvG,0BAA4boB,SAA5b;AAAA;;AAAA;AAAA;;AA/CuGpB,MAAAA,EA+CvG,qBA/CuGA,EA+CvG;AA/CuGA,MAAAA,EA+CvG,qBA/CuGA,EA+CvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA/CuGA,EA+CvG,oBAAoP,CAAC;AAAE4I,IAAAA,OAAO,EAAE1H,2BAAX;AAAwC2H,IAAAA,WAAW,EAAEJ;AAArD,GAAD,CAApP,GA/CuGzI,EA+CvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/CuGA,MAAAA,EA+CvG;AA/CuGA,MAAAA,EA+Cqc,2EAA5iB;AAAA;AAAA;AAAA,eAA0kDkC,EAAE,CAAC4G,OAA7kD;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAhDuG9I,EAgDvG,mBAA2FyI,eAA3F,EAAwH,CAAC;AAC7GP,IAAAA,IAAI,EAAEzH,SADuG;AAE7G4H,IAAAA,IAAI,EAAE,CAAC;AAAEU,MAAAA,QAAQ,EAAE,kBAAZ;AAAgCC,MAAAA,aAAa,EAAEtI,iBAAiB,CAACuI,IAAjE;AAAuEC,MAAAA,eAAe,EAAEvI,uBAAuB,CAACwI,MAAhH;AAAwHC,MAAAA,QAAQ,EAAE,iBAAlI;AAAqJC,MAAAA,MAAM,EAAE,CAAC,eAAD,CAA7J;AAAgLC,MAAAA,IAAI,EAAE;AACjL,iBAAS;AADwK,OAAtL;AAEIC,MAAAA,SAAS,EAAE,CAAC;AAAEX,QAAAA,OAAO,EAAE1H,2BAAX;AAAwC2H,QAAAA,WAAW,EAAEJ;AAArD,OAAD,CAFf;AAEyFH,MAAAA,QAAQ,EAAE,gWAFnG;AAEqckB,MAAAA,MAAM,EAAE,CAAC,4pBAAD;AAF7c,KAAD;AAFuG,GAAD,CAAxH,QAK4B;AAAEC,IAAAA,YAAY,EAAE,CAAC;AAC7BvB,MAAAA,IAAI,EAAEtH,eADuB;AAE7ByH,MAAAA,IAAI,EAAE,CAAClH,YAAD,EAAe;AAAEuI,QAAAA,WAAW,EAAE;AAAf,OAAf;AAFuB,KAAD,CAAhB;AAGZrD,IAAAA,OAAO,EAAE,CAAC;AACV6B,MAAAA,IAAI,EAAEtH,eADI;AAEVyH,MAAAA,IAAI,EAAE,CAACjH,SAAD,EAAY;AAAEsI,QAAAA,WAAW,EAAE;AAAf,OAAZ;AAFI,KAAD;AAHG,GAL5B;AAAA;AAaA;;;AACA,MAAMC,gCAAgC,GAAG,IAAI1J,cAAJ,CAAmB,kCAAnB,CAAzC;AACA;;AACA,SAAS2J,wCAAT,CAAkDC,OAAlD,EAA2D;AACvD,SAAO,MAAMA,OAAO,CAACC,gBAAR,CAAyBC,UAAzB,EAAb;AACH;AACD;;;AACA,MAAMC,iDAAiD,GAAG;AACtDpB,EAAAA,OAAO,EAAEe,gCAD6C;AAEtDM,EAAAA,IAAI,EAAE,CAAC3H,OAAD,CAFgD;AAGtD4H,EAAAA,UAAU,EAAEN;AAH0C,CAA1D;AAKA;AACA;AACA;AACA;;AACA,MAAMO,+BAA+B,GAAG;AACpCvB,EAAAA,OAAO,EAAE1F,iBAD2B;AAEpC2F,EAAAA,WAAW,EAAEhI,UAAU,CAAC,MAAMuJ,sBAAP,CAFa;AAGpCC,EAAAA,KAAK,EAAE;AAH6B,CAAxC;AAKA;AACA;AACA;AACA;;AACA,SAASC,mCAAT,GAA+C;AAC3C,SAAOC,KAAK,CAAC,qEACT,4EADS,GAET,iEAFQ,CAAZ;AAGH;AACD;;;AACA,MAAMC,2BAAN,CAAkC;AAC9BzG,EAAAA,WAAW,CAAC0G,QAAD,EAAWC,QAAX,EAAqBC,iBAArB,EAAwCC,KAAxC,EAA+CnG,kBAA/C,EAAmEoG,cAAnE,EAAmFC,IAAnF,EAAyFC,UAAzF,EAAqGC,SAArG,EAAgHC,cAAhH,EAAgIC,SAAhI,EAA2I;AAClJ,SAAKT,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKnG,kBAAL,GAA0BA,kBAA1B;AACA,SAAKqG,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA,SAAKC,qBAAL,GAA6B,KAA7B;AACA;;AACA,SAAKC,sBAAL,GAA8B,KAA9B;AACA;;AACA,SAAKC,qBAAL,GAA6B5J,YAAY,CAACoD,KAA1C;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKyG,mBAAL,GAA2B,IAA3B;AACA;;AACA,SAAKC,oBAAL,GAA4B,IAAI7J,OAAJ,EAA5B;AACA;AACR;AACA;AACA;;AACQ,SAAK8J,kBAAL,GAA0B,MAAM;AAC5B;AACA;AACA;AACA,WAAKF,mBAAL,GACI,KAAKP,SAAL,CAAeU,aAAf,KAAiC,KAAKjB,QAAL,CAAcvE,aAA/C,IAAgE,KAAKyF,SADzE;AAEH,KAND;AAOA;;;AACA,SAAKC,SAAL,GAAiB,MAAM,CAAG,CAA1B;AACA;;;AACA,SAAKC,UAAL,GAAkB,MAAM,CAAG,CAA3B;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQ,SAAKC,QAAL,GAAgB,MAAhB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,qBAAL,GAA6B,KAA7B;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA;;AACA,SAAKC,gBAAL,GAAwBrK,KAAK,CAAC,MAAM;AAChC,YAAMyE,OAAO,GAAG,KAAK6F,YAAL,GAAoB,KAAKA,YAAL,CAAkB7F,OAAtC,GAAgD,IAAhE;;AACA,UAAIA,OAAJ,EAAa;AACT,eAAOA,OAAO,CAAC8F,OAAR,CAAgBC,IAAhB,CAAqB/I,SAAS,CAACgD,OAAD,CAA9B,EAAyC/C,SAAS,CAAC,MAAMzB,KAAK,CAAC,GAAGwE,OAAO,CAAC5C,GAAR,CAAYQ,MAAM,IAAIA,MAAM,CAACoI,iBAA7B,CAAJ,CAAZ,CAAlD,CAAP;AACH,OAJ+B,CAKhC;AACA;;;AACA,aAAO,KAAKzB,KAAL,CAAW0B,QAAX,CAAoBF,IAApB,CAAyB7I,IAAI,CAAC,CAAD,CAA7B,EAAkCD,SAAS,CAAC,MAAM,KAAK2I,gBAAZ,CAA3C,CAAP;AACH,KAR4B,CAA7B;AASA,SAAKM,eAAL,GAAuB1B,cAAvB;AACH;AACD;AACJ;AACA;AACA;;;AAC4B,MAApB2B,oBAAoB,GAAG;AACvB,WAAO,KAAKpB,qBAAZ;AACH;;AACuB,MAApBoB,oBAAoB,CAAC5G,KAAD,EAAQ;AAC5B,SAAKwF,qBAAL,GAA6BtL,qBAAqB,CAAC8F,KAAD,CAAlD;AACH;;AACD6G,EAAAA,eAAe,GAAG;AACd,UAAMC,MAAM,GAAG,KAAKC,UAAL,EAAf;;AACA,QAAI,OAAOD,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,WAAK9B,KAAL,CAAWgC,iBAAX,CAA6B,MAAMF,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,KAAKpB,kBAArC,CAAnC;AACH;AACJ;;AACDqB,EAAAA,WAAW,CAACX,OAAD,EAAU;AACjB,QAAIA,OAAO,CAAC,UAAD,CAAP,IAAuB,KAAKY,iBAAhC,EAAmD;AAC/C,WAAKC,qBAAL,CAA2B,KAAKD,iBAAhC;;AACA,UAAI,KAAKpB,SAAT,EAAoB;AAChB,aAAKsB,WAAL,CAAiBC,cAAjB;AACH;AACJ;AACJ;;AACDrG,EAAAA,WAAW,GAAG;AACV,UAAM6F,MAAM,GAAG,KAAKC,UAAL,EAAf;;AACA,QAAI,OAAOD,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,MAAAA,MAAM,CAACS,mBAAP,CAA2B,MAA3B,EAAmC,KAAK1B,kBAAxC;AACH;;AACD,SAAKH,qBAAL,CAA2BxE,WAA3B;;AACA,SAAKqE,mBAAL,GAA2B,IAA3B;;AACA,SAAKiC,aAAL;;AACA,SAAK5B,oBAAL,CAA0B6B,QAA1B;AACH;AACD;;;AACa,MAAT1B,SAAS,GAAG;AACZ,WAAO,KAAKK,gBAAL,IAAyB,KAAKE,YAAL,CAAkBnH,SAAlD;AACH;AACD;;;AACAuI,EAAAA,SAAS,GAAG;AACR,SAAKC,cAAL;;AACA,SAAKC,WAAL;AACH;AACD;;;AACAC,EAAAA,UAAU,GAAG;AACT,SAAKC,WAAL;;AACA,QAAI,CAAC,KAAK1B,gBAAV,EAA4B;AACxB;AACH;;AACD,QAAI,KAAKL,SAAT,EAAoB;AAChB;AACA;AACA;AACA;AACA,WAAKf,KAAL,CAAW+C,GAAX,CAAe,MAAM;AACjB,aAAKzB,YAAL,CAAkB9G,MAAlB,CAAyBsB,IAAzB;AACH,OAFD;AAGH;;AACD,SAAKwF,YAAL,CAAkBlH,OAAlB,GAA4B,KAAKgH,gBAAL,GAAwB,KAApD;;AACA,QAAI,KAAKiB,WAAL,IAAoB,KAAKA,WAAL,CAAiBW,WAAjB,EAAxB,EAAwD;AACpD,WAAKX,WAAL,CAAiBY,MAAjB;;AACA,WAAKC,2BAAL,CAAiChH,WAAjC;AACH,KAlBQ,CAmBT;AACA;;;AACA,QAAI,CAAC,KAAKqE,mBAAV,EAA+B;AAC3B;AACA;AACA;AACA;AACA,WAAK1G,kBAAL,CAAwBsJ,aAAxB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIb,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKlB,gBAAT,EAA2B;AACvB,WAAKiB,WAAL,CAAiBC,cAAjB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AAC2B,MAAnBc,mBAAmB,GAAG;AACtB,WAAOnM,KAAK,CAAC,KAAKoK,gBAAN,EAAwB,KAAKC,YAAL,CAAkB9F,WAAlB,CAA8B6H,MAA9B,CAAqC7B,IAArC,CAA0C5I,MAAM,CAAC,MAAM,KAAKwI,gBAAZ,CAAhD,CAAxB,EAAwG,KAAKR,oBAA7G,EAAmI,KAAK0C,sBAAL,EAAnI,EAAkK,KAAKjB,WAAL,GACxK,KAAKA,WAAL,CAAiBkB,WAAjB,GAA+B/B,IAA/B,CAAoC5I,MAAM,CAAC,MAAM,KAAKwI,gBAAZ,CAA1C,CADwK,GAExKlK,EAAE,EAFI,CAAL,CAEKsK,IAFL,EAGP;AACA3I,IAAAA,GAAG,CAAC4D,KAAK,IAAKA,KAAK,YAAYhG,wBAAjB,GAA4CgG,KAA5C,GAAoD,IAA/D,CAJI,CAAP;AAKH;AACD;;;AACgB,MAAZ+G,YAAY,GAAG;AACf,QAAI,KAAKlC,YAAL,IAAqB,KAAKA,YAAL,CAAkB9F,WAA3C,EAAwD;AACpD,aAAO,KAAK8F,YAAL,CAAkB9F,WAAlB,CAA8BiI,UAArC;AACH;;AACD,WAAO,IAAP;AACH;AACD;;;AACAH,EAAAA,sBAAsB,GAAG;AACrB,WAAOrM,KAAK,CAACE,SAAS,CAAC,KAAKiJ,SAAN,EAAiB,OAAjB,CAAV,EAAqCjJ,SAAS,CAAC,KAAKiJ,SAAN,EAAiB,UAAjB,CAA9C,EAA4EjJ,SAAS,CAAC,KAAKiJ,SAAN,EAAiB,UAAjB,CAArF,CAAL,CAAwHoB,IAAxH,CAA6H5I,MAAM,CAAC6D,KAAK,IAAI;AAChJ;AACA;AACA,YAAMiH,WAAW,GAAGrM,eAAe,CAACoF,KAAD,CAAnC;;AACA,YAAMkH,SAAS,GAAG,KAAKxD,UAAL,GAAkB,KAAKA,UAAL,CAAgBrG,WAAhB,CAA4BwB,aAA9C,GAA8D,IAAhF;AACA,YAAMsI,YAAY,GAAG,KAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,UAAjB,CAA4BxI,aAA/C,GAA+D,IAApF;AACA,aAAQ,KAAK8F,gBAAL,IACJsC,WAAW,KAAK,KAAK7D,QAAL,CAAcvE,aAD1B,IAEJ;AACA;AACA;AACA;AACA,WAAK8E,SAAL,CAAeU,aAAf,KAAiC,KAAKjB,QAAL,CAAcvE,aAN3C,KAOH,CAACqI,SAAD,IAAc,CAACA,SAAS,CAACI,QAAV,CAAmBL,WAAnB,CAPZ,MAQH,CAACE,YAAD,IAAiB,CAACA,YAAY,CAACG,QAAb,CAAsBL,WAAtB,CARf,KASJ,CAAC,CAAC,KAAKrB,WATH,IAUJ,CAAC,KAAKA,WAAL,CAAiB2B,cAAjB,CAAgCD,QAAhC,CAAyCL,WAAzC,CAVL;AAWH,KAjByI,CAAnI,CAAP;AAkBH,GA3L6B,CA4L9B;;;AACAO,EAAAA,UAAU,CAACjJ,KAAD,EAAQ;AACdkJ,IAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM,KAAKC,gBAAL,CAAsBrJ,KAAtB,CAA7B;AACH,GA/L6B,CAgM9B;;;AACAsJ,EAAAA,gBAAgB,CAACC,EAAD,EAAK;AACjB,SAAKvD,SAAL,GAAiBuD,EAAjB;AACH,GAnM6B,CAoM9B;;;AACAC,EAAAA,iBAAiB,CAACD,EAAD,EAAK;AAClB,SAAKtD,UAAL,GAAkBsD,EAAlB;AACH,GAvM6B,CAwM9B;;;AACAE,EAAAA,gBAAgB,CAACC,UAAD,EAAa;AACzB,SAAK7E,QAAL,CAAcvE,aAAd,CAA4BqJ,QAA5B,GAAuCD,UAAvC;AACH;;AACDE,EAAAA,cAAc,CAACnI,KAAD,EAAQ;AAClB,UAAMoI,OAAO,GAAGpI,KAAK,CAACoI,OAAtB;AACA,UAAMC,WAAW,GAAG/M,cAAc,CAAC0E,KAAD,CAAlC,CAFkB,CAGlB;AACA;AACA;AACA;;AACA,QAAIoI,OAAO,KAAK7M,MAAZ,IAAsB,CAAC8M,WAA3B,EAAwC;AACpCrI,MAAAA,KAAK,CAACsI,cAAN;AACH;;AACD,QAAI,KAAKvB,YAAL,IAAqBqB,OAAO,KAAK5M,KAAjC,IAA0C,KAAK8I,SAA/C,IAA4D,CAAC+D,WAAjE,EAA8E;AAC1E,WAAKtB,YAAL,CAAkBwB,qBAAlB;;AACA,WAAKC,gBAAL;;AACAxI,MAAAA,KAAK,CAACsI,cAAN;AACH,KAJD,MAKK,IAAI,KAAKzD,YAAT,EAAuB;AACxB,YAAM4D,cAAc,GAAG,KAAK5D,YAAL,CAAkB9F,WAAlB,CAA8BiI,UAArD;AACA,YAAM0B,UAAU,GAAGN,OAAO,KAAK3M,QAAZ,IAAwB2M,OAAO,KAAK1M,UAAvD;;AACA,UAAI0M,OAAO,KAAKzM,GAAZ,IAAoB+M,UAAU,IAAI,CAACL,WAAf,IAA8B,KAAK/D,SAA3D,EAAuE;AACnE,aAAKO,YAAL,CAAkB9F,WAAlB,CAA8B4J,SAA9B,CAAwC3I,KAAxC;AACH,OAFD,MAGK,IAAI0I,UAAU,IAAI,KAAKE,QAAL,EAAlB,EAAmC;AACpC,aAAK3C,SAAL;AACH;;AACD,UAAIyC,UAAU,IAAI,KAAK7D,YAAL,CAAkB9F,WAAlB,CAA8BiI,UAA9B,KAA6CyB,cAA/D,EAA+E;AAC3E,aAAKI,eAAL,CAAqB,KAAKhE,YAAL,CAAkB9F,WAAlB,CAA8B+J,eAA9B,IAAiD,CAAtE;AACH;AACJ;AACJ;;AACDC,EAAAA,YAAY,CAAC/I,KAAD,EAAQ;AAChB,QAAIgJ,MAAM,GAAGhJ,KAAK,CAACgJ,MAAnB;AACA,QAAIzK,KAAK,GAAGyK,MAAM,CAACzK,KAAnB,CAFgB,CAGhB;;AACA,QAAIyK,MAAM,CAACnI,IAAP,KAAgB,QAApB,EAA8B;AAC1BtC,MAAAA,KAAK,GAAGA,KAAK,IAAI,EAAT,GAAc,IAAd,GAAqB0K,UAAU,CAAC1K,KAAD,CAAvC;AACH,KANe,CAOhB;AACA;AACA;AACA;AACA;;;AACA,QAAI,KAAK2K,cAAL,KAAwB3K,KAA5B,EAAmC;AAC/B,WAAK2K,cAAL,GAAsB3K,KAAtB;;AACA,WAAKgG,SAAL,CAAehG,KAAf;;AACA,UAAI,KAAKqK,QAAL,MAAmB,KAAKjF,SAAL,CAAeU,aAAf,KAAiCrE,KAAK,CAACgJ,MAA9D,EAAsE;AAClE,aAAK/C,SAAL;AACH;AACJ;AACJ;;AACDkD,EAAAA,YAAY,GAAG;AACX,QAAI,CAAC,KAAKjF,mBAAV,EAA+B;AAC3B,WAAKA,mBAAL,GAA2B,IAA3B;AACH,KAFD,MAGK,IAAI,KAAK0E,QAAL,EAAJ,EAAqB;AACtB,WAAKM,cAAL,GAAsB,KAAK9F,QAAL,CAAcvE,aAAd,CAA4BN,KAAlD;;AACA,WAAK2H,cAAL;;AACA,WAAKC,WAAL,CAAiB,IAAjB;AACH;AACJ;;AACDiD,EAAAA,YAAY,GAAG;AACX,QAAI,KAAKR,QAAL,MAAmB,CAAC,KAAKtE,SAA7B,EAAwC;AACpC,WAAK2B,SAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,WAAW,CAACkD,aAAa,GAAG,KAAjB,EAAwB;AAC/B,QAAI,KAAK3F,UAAL,IAAmB,KAAKA,UAAL,CAAgB4F,UAAhB,KAA+B,MAAtD,EAA8D;AAC1D,UAAID,aAAJ,EAAmB;AACf,aAAK3F,UAAL,CAAgB6F,oBAAhB;AACH,OAFD,MAGK;AACD,aAAK7F,UAAL,CAAgB4F,UAAhB,GAA6B,QAA7B;AACH;;AACD,WAAKtF,sBAAL,GAA8B,IAA9B;AACH;AACJ;AACD;;;AACAqC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKrC,sBAAT,EAAiC;AAC7B,WAAKN,UAAL,CAAgB4F,UAAhB,GAA6B,MAA7B;AACA,WAAKtF,sBAAL,GAA8B,KAA9B;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIwF,EAAAA,0BAA0B,GAAG;AACzB,UAAMC,WAAW,GAAG,KAAKlG,KAAL,CAAW0B,QAAX,CAAoBF,IAApB,CAAyB7I,IAAI,CAAC,CAAD,CAA7B,CAApB;;AACA,UAAMwN,aAAa,GAAG,KAAK7E,YAAL,CAAkB7F,OAAlB,CAA0B8F,OAA1B,CAAkCC,IAAlC,CAAuC1I,GAAG,CAAC,MAAM,KAAKqJ,iBAAL,CAAuBiE,mBAAvB,EAAP,CAA1C,EACtB;AACA;AACArN,IAAAA,KAAK,CAAC,CAAD,CAHiB,CAAtB,CAFyB,CAMzB;;AACA,WAAQ9B,KAAK,CAACiP,WAAD,EAAcC,aAAd,CAAL,CACH3E,IADG,EAER;AACA;AACA9I,IAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA,WAAKsH,KAAL,CAAW+C,GAAX,CAAe,MAAM;AACjB,cAAMsD,OAAO,GAAG,KAAKtF,SAArB;;AACA,aAAKkE,gBAAL;;AACA,aAAK3D,YAAL,CAAkBtF,cAAlB;;AACA,aAAKnC,kBAAL,CAAwBsJ,aAAxB;;AACA,YAAI,KAAKpC,SAAT,EAAoB;AAChB,eAAKsB,WAAL,CAAiBC,cAAjB,GADgB,CAEhB;AACA;AACA;AACA;;;AACA,cAAI+D,OAAO,KAAK,KAAKtF,SAArB,EAAgC;AAC5B,iBAAKO,YAAL,CAAkB/G,MAAlB,CAAyBuB,IAAzB;AACH;AACJ;AACJ,OAfD;;AAgBA,aAAO,KAAKsH,mBAAZ;AACH,KArBQ,CAJD,EA0BR;AACAzK,IAAAA,IAAI,CAAC,CAAD,CA3BI,EA4BJ;AA5BI,KA6BHiD,SA7BG,CA6BOa,KAAK,IAAI,KAAK6J,iBAAL,CAAuB7J,KAAvB,CA7BhB,CAAR;AA8BH;AACD;;;AACA+F,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKH,WAAT,EAAsB;AAClB,WAAKQ,UAAL;;AACA,WAAKR,WAAL,CAAiBkE,OAAjB;;AACA,WAAKlE,WAAL,GAAmB,IAAnB;AACH;AACJ;;AACDgC,EAAAA,gBAAgB,CAACrJ,KAAD,EAAQ;AACpB,UAAMwL,SAAS,GAAG,KAAKlF,YAAL,IAAqB,KAAKA,YAAL,CAAkBjH,WAAvC,GACZ,KAAKiH,YAAL,CAAkBjH,WAAlB,CAA8BW,KAA9B,CADY,GAEZA,KAFN,CADoB,CAIpB;AACA;;AACA,UAAMyL,UAAU,GAAGD,SAAS,IAAI,IAAb,GAAoBA,SAApB,GAAgC,EAAnD,CANoB,CAOpB;AACA;;AACA,QAAI,KAAKrG,UAAT,EAAqB;AACjB,WAAKA,UAAL,CAAgBuG,QAAhB,CAAyB1L,KAAzB,GAAiCyL,UAAjC;AACH,KAFD,MAGK;AACD,WAAK5G,QAAL,CAAcvE,aAAd,CAA4BN,KAA5B,GAAoCyL,UAApC;AACH;;AACD,SAAKd,cAAL,GAAsBc,UAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIH,EAAAA,iBAAiB,CAAC7J,KAAD,EAAQ;AACrB,UAAMrD,MAAM,GAAGqD,KAAK,IAAIA,KAAK,CAACrD,MAA9B;;AACA,QAAIA,MAAJ,EAAY;AACR,WAAKuN,4BAAL,CAAkCvN,MAAlC;;AACA,WAAKiL,gBAAL,CAAsBjL,MAAM,CAAC4B,KAA7B;;AACA,WAAKgG,SAAL,CAAe5H,MAAM,CAAC4B,KAAtB;;AACA,WAAKsG,YAAL,CAAkB9E,gBAAlB,CAAmCpD,MAAnC;;AACA,WAAKyG,QAAL,CAAcvE,aAAd,CAA4BsL,KAA5B;AACH;;AACD,SAAK/D,UAAL;AACH;AACD;AACJ;AACA;;;AACI8D,EAAAA,4BAA4B,CAACE,IAAD,EAAO;AAC/B,SAAKvF,YAAL,CAAkB7F,OAAlB,CAA0BqL,OAA1B,CAAkCzN,MAAM,IAAI;AACxC,UAAIA,MAAM,KAAKwN,IAAX,IAAmBxN,MAAM,CAAC0N,QAA9B,EAAwC;AACpC1N,QAAAA,MAAM,CAAC2N,QAAP;AACH;AACJ,KAJD;AAKH;;AACDrE,EAAAA,cAAc,GAAG;AACb,QAAIsE,EAAJ;;AACA,QAAI,CAAC,KAAK3F,YAAN,KAAuB,OAAO4F,SAAP,KAAqB,WAArB,IAAoCA,SAA3D,CAAJ,EAA2E;AACvE,YAAMxH,mCAAmC,EAAzC;AACH;;AACD,QAAIyH,UAAU,GAAG,KAAK9E,WAAtB;;AACA,QAAI,CAAC8E,UAAL,EAAiB;AACb,WAAKC,OAAL,GAAe,IAAI/O,cAAJ,CAAmB,KAAKiJ,YAAL,CAAkB5D,QAArC,EAA+C,KAAKqC,iBAApD,EAAuE;AAClFpF,QAAAA,EAAE,EAAE,CAACsM,EAAE,GAAG,KAAK9G,UAAX,MAA2B,IAA3B,IAAmC8G,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACI,UAAH;AADkB,OAAvE,CAAf;AAGAF,MAAAA,UAAU,GAAG,KAAKrH,QAAL,CAAcwH,MAAd,CAAqB,KAAKC,iBAAL,EAArB,CAAb;AACA,WAAKlF,WAAL,GAAmB8E,UAAnB,CALa,CAMb;AACA;;AACAA,MAAAA,UAAU,CAACK,aAAX,GAA2B5L,SAA3B,CAAqCa,KAAK,IAAI;AAC1C;AACA;AACA,YAAKA,KAAK,CAACoI,OAAN,KAAkB7M,MAAlB,IAA4B,CAACD,cAAc,CAAC0E,KAAD,CAA5C,IACCA,KAAK,CAACoI,OAAN,KAAkB3M,QAAlB,IAA8BH,cAAc,CAAC0E,KAAD,EAAQ,QAAR,CADjD,EACqE;AACjE,eAAKmE,oBAAL,CAA0B6G,IAA1B;;AACA,eAAKxC,gBAAL,GAFiE,CAGjE;AACA;;;AACAxI,UAAAA,KAAK,CAACiL,eAAN;AACAjL,UAAAA,KAAK,CAACsI,cAAN;AACH;AACJ,OAZD;AAaA,WAAKrE,qBAAL,GAA6B,KAAKL,cAAL,CAAoB1E,MAApB,GAA6BC,SAA7B,CAAuC,MAAM;AACtE,YAAI,KAAKmF,SAAL,IAAkBoG,UAAtB,EAAkC;AAC9BA,UAAAA,UAAU,CAACQ,UAAX,CAAsB;AAAEC,YAAAA,KAAK,EAAE,KAAKC,cAAL;AAAT,WAAtB;AACH;AACJ,OAJ4B,CAA7B;AAKH,KA1BD,MA2BK;AACD;AACA,WAAK1F,iBAAL,CAAuB2F,SAAvB,CAAiC,KAAKC,oBAAL,EAAjC;;AACAZ,MAAAA,UAAU,CAACQ,UAAX,CAAsB;AAAEC,QAAAA,KAAK,EAAE,KAAKC,cAAL;AAAT,OAAtB;AACH;;AACD,QAAIV,UAAU,IAAI,CAACA,UAAU,CAACnE,WAAX,EAAnB,EAA6C;AACzCmE,MAAAA,UAAU,CAACa,MAAX,CAAkB,KAAKZ,OAAvB;AACA,WAAKlE,2BAAL,GAAmC,KAAK+C,0BAAL,EAAnC;AACH;;AACD,UAAMI,OAAO,GAAG,KAAKtF,SAArB;;AACA,SAAKO,YAAL,CAAkBtF,cAAlB;;AACA,SAAKsF,YAAL,CAAkBlH,OAAlB,GAA4B,KAAKgH,gBAAL,GAAwB,IAApD,CA5Ca,CA6Cb;AACA;;AACA,QAAI,KAAKL,SAAL,IAAkBsF,OAAO,KAAK,KAAKtF,SAAvC,EAAkD;AAC9C,WAAKO,YAAL,CAAkB/G,MAAlB,CAAyBuB,IAAzB;AACH;AACJ;;AACDyL,EAAAA,iBAAiB,GAAG;AAChB,QAAIN,EAAJ;;AACA,WAAO,IAAItP,aAAJ,CAAkB;AACrBsQ,MAAAA,gBAAgB,EAAE,KAAKC,mBAAL,EADG;AAErBjI,MAAAA,cAAc,EAAE,KAAK0B,eAAL,EAFK;AAGrBiG,MAAAA,KAAK,EAAE,KAAKC,cAAL,EAHc;AAIrBM,MAAAA,SAAS,EAAE,KAAKjI,IAJK;AAKrBkI,MAAAA,UAAU,EAAE,CAACnB,EAAE,GAAG,KAAK3G,SAAX,MAA0B,IAA1B,IAAkC2G,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACoB;AALrD,KAAlB,CAAP;AAOH;;AACDH,EAAAA,mBAAmB,GAAG;AAClB,UAAMI,QAAQ,GAAG,KAAKxI,QAAL,CACZoB,QADY,GAEZqH,mBAFY,CAEQ,KAAKR,oBAAL,EAFR,EAGZS,sBAHY,CAGW,KAHX,EAIZC,QAJY,CAIH,KAJG,CAAjB;;AAKA,SAAKrG,qBAAL,CAA2BkG,QAA3B;;AACA,SAAKnG,iBAAL,GAAyBmG,QAAzB;AACA,WAAOA,QAAP;AACH;AACD;;;AACAlG,EAAAA,qBAAqB,CAAC6F,gBAAD,EAAmB;AACpC;AACA;AACA,UAAMS,cAAc,GAAG,CACnB;AAAEC,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,OAAO,EAAE,QAA7B;AAAuCC,MAAAA,QAAQ,EAAE,OAAjD;AAA0DC,MAAAA,QAAQ,EAAE;AAApE,KADmB,EAEnB;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE,QAA3B;AAAqCC,MAAAA,QAAQ,EAAE,KAA/C;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAFmB,CAAvB,CAHoC,CAOpC;AACA;AACA;;AACA,UAAMV,UAAU,GAAG,KAAKW,WAAxB;AACA,UAAMC,cAAc,GAAG,CACnB;AAAEL,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,OAAO,EAAE,KAA7B;AAAoCC,MAAAA,QAAQ,EAAE,OAA9C;AAAuDC,MAAAA,QAAQ,EAAE,QAAjE;AAA2EV,MAAAA;AAA3E,KADmB,EAEnB;AAAEO,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE,KAA3B;AAAkCC,MAAAA,QAAQ,EAAE,KAA5C;AAAmDC,MAAAA,QAAQ,EAAE,QAA7D;AAAuEV,MAAAA;AAAvE,KAFmB,CAAvB;AAIA,QAAIa,SAAJ;;AACA,QAAI,KAAK/H,QAAL,KAAkB,OAAtB,EAA+B;AAC3B+H,MAAAA,SAAS,GAAGD,cAAZ;AACH,KAFD,MAGK,IAAI,KAAK9H,QAAL,KAAkB,OAAtB,EAA+B;AAChC+H,MAAAA,SAAS,GAAGP,cAAZ;AACH,KAFI,MAGA;AACDO,MAAAA,SAAS,GAAG,CAAC,GAAGP,cAAJ,EAAoB,GAAGM,cAAvB,CAAZ;AACH;;AACDf,IAAAA,gBAAgB,CAACiB,aAAjB,CAA+BD,SAA/B;AACH;;AACDlB,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKlE,WAAT,EAAsB;AAClB,aAAO,KAAKA,WAAL,CAAiBC,UAAxB;AACH;;AACD,WAAO,KAAK3D,UAAL,GAAkB,KAAKA,UAAL,CAAgBgJ,yBAAhB,EAAlB,GAAgE,KAAKtJ,QAA5E;AACH;;AACDgI,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKvG,YAAL,CAAkB1D,UAAlB,IAAgC,KAAKwL,aAAL,EAAvC;AACH;AACD;;;AACAA,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKrB,oBAAL,GAA4BzM,aAA5B,CAA0C+N,qBAA1C,GAAkEzB,KAAzE;AACH;AACD;AACJ;AACA;AACA;;;AACI3C,EAAAA,gBAAgB,GAAG;AACf,UAAM3D,YAAY,GAAG,KAAKA,YAA1B;;AACA,QAAIA,YAAY,CAAC3H,qBAAjB,EAAwC;AACpC;AACA;AACA2H,MAAAA,YAAY,CAAC9F,WAAb,CAAyB8N,kBAAzB;AACH,KAJD,MAKK;AACDhI,MAAAA,YAAY,CAAC9F,WAAb,CAAyB+N,aAAzB,CAAuC,CAAC,CAAxC;AACH;AACJ;AACD;;;AACAlE,EAAAA,QAAQ,GAAG;AACP,UAAMmE,OAAO,GAAG,KAAK3J,QAAL,CAAcvE,aAA9B;AACA,WAAO,CAACkO,OAAO,CAACC,QAAT,IAAqB,CAACD,OAAO,CAAC7E,QAA9B,IAA0C,CAAC,KAAKnE,qBAAvD;AACH;AACD;;;AACAuB,EAAAA,UAAU,GAAG;AACT,QAAIkF,EAAJ;;AACA,WAAO,CAAC,CAACA,EAAE,GAAG,KAAK7G,SAAX,MAA0B,IAA1B,IAAkC6G,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACyC,WAA/D,KAA+E5H,MAAtF;AACH;AACD;;;AACAwD,EAAAA,eAAe,CAACzJ,KAAD,EAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMyF,YAAY,GAAG,KAAKA,YAA1B;;AACA,UAAMqI,UAAU,GAAGjT,6BAA6B,CAACmF,KAAD,EAAQyF,YAAY,CAAC7F,OAArB,EAA8B6F,YAAY,CAACzC,YAA3C,CAAhD;;AACA,QAAIhD,KAAK,KAAK,CAAV,IAAe8N,UAAU,KAAK,CAAlC,EAAqC;AACjC;AACA;AACA;AACArI,MAAAA,YAAY,CAACnF,aAAb,CAA2B,CAA3B;AACH,KALD,MAMK,IAAImF,YAAY,CAACjF,KAAjB,EAAwB;AACzB,YAAMhD,MAAM,GAAGiI,YAAY,CAAC7F,OAAb,CAAqBM,OAArB,GAA+BF,KAA/B,CAAf;;AACA,UAAIxC,MAAJ,EAAY;AACR,cAAMmQ,OAAO,GAAGnQ,MAAM,CAACuQ,eAAP,EAAhB;;AACA,cAAMC,iBAAiB,GAAGlT,wBAAwB,CAAC6S,OAAO,CAACM,SAAT,EAAoBN,OAAO,CAACO,YAA5B,EAA0CzI,YAAY,CAAChF,aAAb,EAA1C,EAAwEgF,YAAY,CAACjF,KAAb,CAAmBf,aAAnB,CAAiCyO,YAAzG,CAAlD;;AACAzI,QAAAA,YAAY,CAACnF,aAAb,CAA2B0N,iBAA3B;AACH;AACJ;AACJ;;AAniB6B;;AAqiBlCjK,2BAA2B,CAAC3C,IAA5B;AAAA,mBAAwH2C,2BAAxH,EAjoBuGxK,EAioBvG,mBAAqKA,EAAE,CAAC+H,UAAxK,GAjoBuG/H,EAioBvG,mBAA+LqC,IAAI,CAACC,OAApM,GAjoBuGtC,EAioBvG,mBAAwNA,EAAE,CAAC4U,gBAA3N,GAjoBuG5U,EAioBvG,mBAAwPA,EAAE,CAAC6U,MAA3P,GAjoBuG7U,EAioBvG,mBAA8QA,EAAE,CAAC8H,iBAAjR,GAjoBuG9H,EAioBvG,mBAA+S2J,gCAA/S,GAjoBuG3J,EAioBvG,mBAA4V4D,IAAI,CAACkR,cAAjW,MAjoBuG9U,EAioBvG,mBAA4YoD,cAA5Y,MAjoBuGpD,EAioBvG,mBAAmcmC,QAAnc,MAjoBuGnC,EAioBvG,mBAAweyC,EAAE,CAACsS,aAA3e,GAjoBuG/U,EAioBvG,mBAAqgBmE,gCAArgB;AAAA;;AACAqG,2BAA2B,CAACvC,IAA5B,kBAloBuGjI,EAkoBvG;AAAA,QAA4GwK,2BAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAloBuGxK,EAkoBvG;AAAA;;AACA;AAAA,qDAnoBuGA,EAmoBvG,mBAA2FwK,2BAA3F,EAAoI,CAAC;AACzHtC,IAAAA,IAAI,EAAE9H;AADmH,GAAD,CAApI,EAE4B,YAAY;AAChC,WAAO,CAAC;AAAE8H,MAAAA,IAAI,EAAElI,EAAE,CAAC+H;AAAX,KAAD,EAA0B;AAAEG,MAAAA,IAAI,EAAE7F,IAAI,CAACC;AAAb,KAA1B,EAAkD;AAAE4F,MAAAA,IAAI,EAAElI,EAAE,CAAC4U;AAAX,KAAlD,EAAiF;AAAE1M,MAAAA,IAAI,EAAElI,EAAE,CAAC6U;AAAX,KAAjF,EAAsG;AAAE3M,MAAAA,IAAI,EAAElI,EAAE,CAAC8H;AAAX,KAAtG,EAAsI;AAAEI,MAAAA,IAAI,EAAEC,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAC7JF,QAAAA,IAAI,EAAE7H,MADuJ;AAE7JgI,QAAAA,IAAI,EAAE,CAACsB,gCAAD;AAFuJ,OAAD;AAA/B,KAAtI,EAGW;AAAEzB,MAAAA,IAAI,EAAEtE,IAAI,CAACkR,cAAb;AAA6B1M,MAAAA,UAAU,EAAE,CAAC;AAC5CF,QAAAA,IAAI,EAAEpH;AADsC,OAAD;AAAzC,KAHX,EAKW;AAAEoH,MAAAA,IAAI,EAAE/E,EAAE,CAAC6R,YAAX;AAAyB5M,MAAAA,UAAU,EAAE,CAAC;AACxCF,QAAAA,IAAI,EAAEpH;AADkC,OAAD,EAExC;AACCoH,QAAAA,IAAI,EAAE7H,MADP;AAECgI,QAAAA,IAAI,EAAE,CAACjF,cAAD;AAFP,OAFwC,EAKxC;AACC8E,QAAAA,IAAI,EAAEnH;AADP,OALwC;AAArC,KALX,EAYW;AAAEmH,MAAAA,IAAI,EAAEC,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAClCF,QAAAA,IAAI,EAAEpH;AAD4B,OAAD,EAElC;AACCoH,QAAAA,IAAI,EAAE7H,MADP;AAECgI,QAAAA,IAAI,EAAE,CAAClG,QAAD;AAFP,OAFkC;AAA/B,KAZX,EAiBW;AAAE+F,MAAAA,IAAI,EAAEzF,EAAE,CAACsS;AAAX,KAjBX,EAiBuC;AAAE7M,MAAAA,IAAI,EAAEC,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAC9DF,QAAAA,IAAI,EAAEpH;AADwD,OAAD,EAE9D;AACCoH,QAAAA,IAAI,EAAE7H,MADP;AAECgI,QAAAA,IAAI,EAAE,CAAClE,gCAAD;AAFP,OAF8D;AAA/B,KAjBvC,CAAP;AAuBH,GA1BL,EA0BuB;AAAE+H,IAAAA,YAAY,EAAE,CAAC;AACxBhE,MAAAA,IAAI,EAAE3H,KADkB;AAExB8H,MAAAA,IAAI,EAAE,CAAC,iBAAD;AAFkB,KAAD,CAAhB;AAGPyD,IAAAA,QAAQ,EAAE,CAAC;AACX5D,MAAAA,IAAI,EAAE3H,KADK;AAEX8H,MAAAA,IAAI,EAAE,CAAC,yBAAD;AAFK,KAAD,CAHH;AAMPoG,IAAAA,WAAW,EAAE,CAAC;AACdvG,MAAAA,IAAI,EAAE3H,KADQ;AAEd8H,MAAAA,IAAI,EAAE,CAAC,4BAAD;AAFQ,KAAD,CANN;AASP0D,IAAAA,qBAAqB,EAAE,CAAC;AACxB7D,MAAAA,IAAI,EAAE3H,KADkB;AAExB8H,MAAAA,IAAI,EAAE,CAAC,cAAD;AAFkB,KAAD,CAThB;AAYPmE,IAAAA,oBAAoB,EAAE,CAAC;AACvBtE,MAAAA,IAAI,EAAE3H,KADiB;AAEvB8H,MAAAA,IAAI,EAAE,CAAC,yBAAD;AAFiB,KAAD;AAZf,GA1BvB;AAAA;;AA0CA,MAAM+B,sBAAN,SAAqCI,2BAArC,CAAiE;AAC7DzG,EAAAA,WAAW,GAAG;AACV,UAAM,GAAG2E,SAAT;AACA,SAAKiL,WAAL,GAAmB,8BAAnB;AACH;;AAJ4D;;AAMjEvJ,sBAAsB,CAACvC,IAAvB;AAAA;AAAA;AAAA,0FAnrBuG7H,EAmrBvG,uBAAmHoK,sBAAnH,SAAmHA,sBAAnH;AAAA;AAAA;;AACAA,sBAAsB,CAACnC,IAAvB,kBAprBuGjI,EAorBvG;AAAA,QAAuGoK,sBAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAprBuGpK,MAAAA,EAorBvG;AAAA,eAAuG,kBAAvG;AAAA;AAAA,eAAuG,gBAAvG;AAAA;AAAA,eAAuG,wBAAvG;AAAA;AAAA,eAAuG,0BAAvG;AAAA;AAAA,eAAuG,kBAAvG;AAAA;AAAA;;AAAA;AAprBuGA,MAAAA,EAorBvG;AAAA;AAAA;AAAA;AAAA,aAprBuGA,EAorBvG,oBAA05B,CAACmK,+BAAD,CAA15B,GAprBuGnK,EAorBvG;AAAA;;AACA;AAAA,qDArrBuGA,EAqrBvG,mBAA2FoK,sBAA3F,EAA+H,CAAC;AACpHlC,IAAAA,IAAI,EAAE9H,SAD8G;AAEpHiI,IAAAA,IAAI,EAAE,CAAC;AACCU,MAAAA,QAAQ,EAAG,mDADZ;AAECO,MAAAA,IAAI,EAAE;AACF,iBAAS,0BADP;AAEF,+BAAuB,uBAFrB;AAGF,uBAAe,0CAHb;AAIF,oCAA4B,sCAJ1B;AAKF,wCAAgC,sDAL9B;AAMF,gCAAwB,oDANtB;AAOF,4BAAoB,gEAPlB;AAQF,gCAAwB,yCARtB;AASF;AACA;AACA,qBAAa,gBAXX;AAYF,kBAAU,cAZR;AAaF,mBAAW,sBAbT;AAcF,qBAAa,wBAdX;AAeF,mBAAW;AAfT,OAFP;AAmBCF,MAAAA,QAAQ,EAAE,wBAnBX;AAoBCG,MAAAA,SAAS,EAAE,CAACY,+BAAD;AApBZ,KAAD;AAF8G,GAAD,CAA/H;AAAA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAM8K,0BAAN,CAAiC;AAC7BlR,EAAAA,WAAW;AACX;AACA2K,EAAAA,UAFW,EAEC;AACR,SAAKA,UAAL,GAAkBA,UAAlB;AACH;;AAL4B;;AAOjCuG,0BAA0B,CAACpN,IAA3B;AAAA,mBAAuHoN,0BAAvH,EA9tBuGjV,EA8tBvG,mBAAmKA,EAAE,CAAC+H,UAAtK;AAAA;;AACAkN,0BAA0B,CAAChN,IAA3B,kBA/tBuGjI,EA+tBvG;AAAA,QAA2GiV;AAA3G;;AACA;AAAA,qDAhuBuGjV,EAguBvG,mBAA2FiV,0BAA3F,EAAmI,CAAC;AACxH/M,IAAAA,IAAI,EAAE9H;AADkH,GAAD,CAAnI,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAE8H,MAAAA,IAAI,EAAElI,EAAE,CAAC+H;AAAX,KAAD,CAAP;AAAmC,GAF7E;AAAA;AAGA;AACA;AACA;AACA;;;AACA,MAAMmN,qBAAN,SAAoCD,0BAApC,CAA+D;;AAE/DC,qBAAqB,CAACrN,IAAtB;AAAA;AAAA;AAAA,wFAzuBuG7H,EAyuBvG,uBAAkHkV,qBAAlH,SAAkHA,qBAAlH;AAAA;AAAA;;AACAA,qBAAqB,CAACjN,IAAtB,kBA1uBuGjI,EA0uBvG;AAAA,QAAsGkV,qBAAtG;AAAA;AAAA;AAAA,aA1uBuGlV,EA0uBvG;AAAA;;AACA;AAAA,qDA3uBuGA,EA2uBvG,mBAA2FkV,qBAA3F,EAA8H,CAAC;AACnHhN,IAAAA,IAAI,EAAE9H,SAD6G;AAEnHiI,IAAAA,IAAI,EAAE,CAAC;AACCU,MAAAA,QAAQ,EAAE,yBADX;AAECK,MAAAA,QAAQ,EAAE;AAFX,KAAD;AAF6G,GAAD,CAA9H;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM+L,qBAAN,CAA4B;;AAE5BA,qBAAqB,CAACtN,IAAtB;AAAA,mBAAkHsN,qBAAlH;AAAA;;AACAA,qBAAqB,CAACC,IAAtB,kBA7vBuGpV,EA6vBvG;AAAA,QAAmHmV;AAAnH;AAMAA,qBAAqB,CAACE,IAAtB,kBAnwBuGrV,EAmwBvG;AAAA,aAAqJ,CAACgK,iDAAD,CAArJ;AAAA,YAAoN,CAACxH,aAAD,EAAgBhB,eAAhB,EAAiCC,eAAjC,EAAkDW,YAAlD,CAApN,EAAqRM,mBAArR,EACQlB,eADR,EAEQC,eAFR;AAAA;;AAGA;AAAA,qDAtwBuGzB,EAswBvG,mBAA2FmV,qBAA3F,EAA8H,CAAC;AACnHjN,IAAAA,IAAI,EAAElH,QAD6G;AAEnHqH,IAAAA,IAAI,EAAE,CAAC;AACCiN,MAAAA,OAAO,EAAE,CAAC9S,aAAD,EAAgBhB,eAAhB,EAAiCC,eAAjC,EAAkDW,YAAlD,CADV;AAECmT,MAAAA,OAAO,EAAE,CACL9M,eADK,EAEL2B,sBAFK,EAGL8K,qBAHK,EAILxS,mBAJK,EAKLlB,eALK,EAMLC,eANK,CAFV;AAUC+T,MAAAA,YAAY,EAAE,CAAC/M,eAAD,EAAkB2B,sBAAlB,EAA0C8K,qBAA1C,CAVf;AAWC3L,MAAAA,SAAS,EAAE,CAACS,iDAAD;AAXZ,KAAD;AAF6G,GAAD,CAA9H;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS7F,gCAAT,EAA2CG,wCAA3C,EAAqFqF,gCAArF,EAAuHC,wCAAvH,EAAiKI,iDAAjK,EAAoNG,+BAApN,EAAqP1B,eAArP,EAAsQ0M,qBAAtQ,EAA6RD,qBAA7R,EAAoTpR,4BAApT,EAAkVsG,sBAAlV,EAA0W5F,oBAA1W,EAAgYyQ,0BAAhY,EAA4ZzK,2BAA5Z,EAAybF,mCAAzb","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\r\nimport * as i0 from '@angular/core';\r\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\r\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\r\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\r\nimport * as i1 from '@angular/cdk/platform';\r\nimport { _getEventTarget } from '@angular/cdk/platform';\r\nimport * as i2 from '@angular/common';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport * as i1$1 from '@angular/cdk/overlay';\r\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\r\nimport * as i3 from '@angular/cdk/scrolling';\r\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport * as i4 from '@angular/material/form-field';\r\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\r\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\r\nimport * as i2$1 from '@angular/cdk/bidi';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nclass MatAutocompleteSelectedEvent {\r\n    constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    source, \r\n    /** Option that was selected. */\r\n    option) {\r\n        this.source = source;\r\n        this.option = option;\r\n    }\r\n}\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\r\n});\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\r\n    return { autoActiveFirstOption: false };\r\n}\r\n/** Base class with all of the `MatAutocomplete` functionality. */\r\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\r\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\r\n        super();\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._elementRef = _elementRef;\r\n        this._activeOptionChanges = Subscription.EMPTY;\r\n        /** Whether the autocomplete panel should be visible, depending on option length. */\r\n        this.showPanel = false;\r\n        this._isOpen = false;\r\n        /** Function that maps an option's control value to its display value in the trigger. */\r\n        this.displayWith = null;\r\n        /** Event that is emitted whenever an option from the list is selected. */\r\n        this.optionSelected = new EventEmitter();\r\n        /** Event that is emitted when the autocomplete panel is opened. */\r\n        this.opened = new EventEmitter();\r\n        /** Event that is emitted when the autocomplete panel is closed. */\r\n        this.closed = new EventEmitter();\r\n        /** Emits whenever an option is activated. */\r\n        this.optionActivated = new EventEmitter();\r\n        this._classList = {};\r\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\r\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\r\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\r\n        // option altogether.\r\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\r\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\r\n    }\r\n    /** Whether the autocomplete panel is open. */\r\n    get isOpen() {\r\n        return this._isOpen && this.showPanel;\r\n    }\r\n    /**\r\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n     */\r\n    get autoActiveFirstOption() {\r\n        return this._autoActiveFirstOption;\r\n    }\r\n    set autoActiveFirstOption(value) {\r\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n     * inside the overlay container to allow for easy styling.\r\n     */\r\n    set classList(value) {\r\n        if (value && value.length) {\r\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\r\n                classList[className] = true;\r\n                return classList;\r\n            }, {});\r\n        }\r\n        else {\r\n            this._classList = {};\r\n        }\r\n        this._setVisibilityClasses(this._classList);\r\n        this._elementRef.nativeElement.className = '';\r\n    }\r\n    ngAfterContentInit() {\r\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\r\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\r\n            if (this.isOpen) {\r\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\r\n            }\r\n        });\r\n        // Set the initial visibility state.\r\n        this._setVisibility();\r\n    }\r\n    ngOnDestroy() {\r\n        this._activeOptionChanges.unsubscribe();\r\n    }\r\n    /**\r\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n     * above or below the fold, as they are not actually being focused when active.\r\n     */\r\n    _setScrollTop(scrollTop) {\r\n        if (this.panel) {\r\n            this.panel.nativeElement.scrollTop = scrollTop;\r\n        }\r\n    }\r\n    /** Returns the panel's scrollTop. */\r\n    _getScrollTop() {\r\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n    }\r\n    /** Panel should hide itself when the option list is empty. */\r\n    _setVisibility() {\r\n        this.showPanel = !!this.options.length;\r\n        this._setVisibilityClasses(this._classList);\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /** Emits the `select` event. */\r\n    _emitSelectEvent(option) {\r\n        const event = new MatAutocompleteSelectedEvent(this, option);\r\n        this.optionSelected.emit(event);\r\n    }\r\n    /** Gets the aria-labelledby for the autocomplete panel. */\r\n    _getPanelAriaLabelledby(labelId) {\r\n        if (this.ariaLabel) {\r\n            return null;\r\n        }\r\n        const labelExpression = labelId ? labelId + ' ' : '';\r\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\r\n    }\r\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\r\n    _setVisibilityClasses(classList) {\r\n        classList[this._visibleClass] = this.showPanel;\r\n        classList[this._hiddenClass] = !this.showPanel;\r\n    }\r\n}\r\n_MatAutocompleteBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Directive });\r\n_MatAutocompleteBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", panelWidth: \"panelWidth\", classList: [\"class\", \"classList\"] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteBase, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\r\n                    }] }, { type: i1.Platform }];\r\n    }, propDecorators: { template: [{\r\n                type: ViewChild,\r\n                args: [TemplateRef, { static: true }]\r\n            }], panel: [{\r\n                type: ViewChild,\r\n                args: ['panel']\r\n            }], ariaLabel: [{\r\n                type: Input,\r\n                args: ['aria-label']\r\n            }], ariaLabelledby: [{\r\n                type: Input,\r\n                args: ['aria-labelledby']\r\n            }], displayWith: [{\r\n                type: Input\r\n            }], autoActiveFirstOption: [{\r\n                type: Input\r\n            }], panelWidth: [{\r\n                type: Input\r\n            }], optionSelected: [{\r\n                type: Output\r\n            }], opened: [{\r\n                type: Output\r\n            }], closed: [{\r\n                type: Output\r\n            }], optionActivated: [{\r\n                type: Output\r\n            }], classList: [{\r\n                type: Input,\r\n                args: ['class']\r\n            }] } });\r\nclass MatAutocomplete extends _MatAutocompleteBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._visibleClass = 'mat-autocomplete-visible';\r\n        this._hiddenClass = 'mat-autocomplete-hidden';\r\n    }\r\n}\r\nMatAutocomplete.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocomplete, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\nMatAutocomplete.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { disableRipple: \"disableRipple\" }, host: { classAttribute: \"mat-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }], exportAs: [\"matAutocomplete\"], usesInheritance: true, ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocomplete, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\r\n                        'class': 'mat-autocomplete',\r\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"] }]\r\n        }], propDecorators: { optionGroups: [{\r\n                type: ContentChildren,\r\n                args: [MAT_OPTGROUP, { descendants: true }]\r\n            }], options: [{\r\n                type: ContentChildren,\r\n                args: [MatOption, { descendants: true }]\r\n            }] } });\r\n\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\r\n/** @docs-private */\r\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.reposition();\r\n}\r\n/** @docs-private */\r\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\r\n};\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n    multi: true,\r\n};\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n * @docs-private\r\n */\r\nfunction getMatAutocompleteMissingPanelError() {\r\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\r\n}\r\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\r\nclass _MatAutocompleteTriggerBase {\r\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\r\n        this._element = _element;\r\n        this._overlay = _overlay;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._zone = _zone;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._dir = _dir;\r\n        this._formField = _formField;\r\n        this._document = _document;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._defaults = _defaults;\r\n        this._componentDestroyed = false;\r\n        this._autocompleteDisabled = false;\r\n        /** Whether or not the label state is being overridden. */\r\n        this._manuallyFloatingLabel = false;\r\n        /** Subscription to viewport size changes. */\r\n        this._viewportSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\r\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\r\n         * comes back.\r\n         */\r\n        this._canOpenOnNextFocus = true;\r\n        /** Stream of keyboard events that can close the panel. */\r\n        this._closeKeyEventStream = new Subject();\r\n        /**\r\n         * Event handler for when the window is blurred. Needs to be an\r\n         * arrow function in order to preserve the context.\r\n         */\r\n        this._windowBlurHandler = () => {\r\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\r\n            // refocused when they come back. In this case we want to skip the first focus event, if the\r\n            // pane was closed, in order to avoid reopening it unintentionally.\r\n            this._canOpenOnNextFocus =\r\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\r\n        };\r\n        /** `View -> model callback called when value changes` */\r\n        this._onChange = () => { };\r\n        /** `View -> model callback called when autocomplete has been touched` */\r\n        this._onTouched = () => { };\r\n        /**\r\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\r\n         * will render the panel underneath the trigger if there is enough space for it to fit in\r\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\r\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\r\n         * whether it fits completely in the viewport.\r\n         */\r\n        this.position = 'auto';\r\n        /**\r\n         * `autocomplete` attribute to be set on the input element.\r\n         * @docs-private\r\n         */\r\n        this.autocompleteAttribute = 'off';\r\n        this._overlayAttached = false;\r\n        /** Stream of changes to the selection state of the autocomplete options. */\r\n        this.optionSelections = defer(() => {\r\n            const options = this.autocomplete ? this.autocomplete.options : null;\r\n            if (options) {\r\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\r\n            }\r\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n            // Return a stream that we'll replace with the real one once everything is in place.\r\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\r\n        });\r\n        this._scrollStrategy = scrollStrategy;\r\n    }\r\n    /**\r\n     * Whether the autocomplete is disabled. When disabled, the element will\r\n     * act as a regular input and the user won't be able to open the panel.\r\n     */\r\n    get autocompleteDisabled() {\r\n        return this._autocompleteDisabled;\r\n    }\r\n    set autocompleteDisabled(value) {\r\n        this._autocompleteDisabled = coerceBooleanProperty(value);\r\n    }\r\n    ngAfterViewInit() {\r\n        const window = this._getWindow();\r\n        if (typeof window !== 'undefined') {\r\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['position'] && this._positionStrategy) {\r\n            this._setStrategyPositions(this._positionStrategy);\r\n            if (this.panelOpen) {\r\n                this._overlayRef.updatePosition();\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        const window = this._getWindow();\r\n        if (typeof window !== 'undefined') {\r\n            window.removeEventListener('blur', this._windowBlurHandler);\r\n        }\r\n        this._viewportSubscription.unsubscribe();\r\n        this._componentDestroyed = true;\r\n        this._destroyPanel();\r\n        this._closeKeyEventStream.complete();\r\n    }\r\n    /** Whether or not the autocomplete panel is open. */\r\n    get panelOpen() {\r\n        return this._overlayAttached && this.autocomplete.showPanel;\r\n    }\r\n    /** Opens the autocomplete suggestion panel. */\r\n    openPanel() {\r\n        this._attachOverlay();\r\n        this._floatLabel();\r\n    }\r\n    /** Closes the autocomplete suggestion panel. */\r\n    closePanel() {\r\n        this._resetLabel();\r\n        if (!this._overlayAttached) {\r\n            return;\r\n        }\r\n        if (this.panelOpen) {\r\n            // Only emit if the panel was visible.\r\n            // The `NgZone.onStable` always emits outside of the Angular zone,\r\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\r\n            // We should manually run in Angular zone to update UI after panel closing.\r\n            this._zone.run(() => {\r\n                this.autocomplete.closed.emit();\r\n            });\r\n        }\r\n        this.autocomplete._isOpen = this._overlayAttached = false;\r\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n            this._overlayRef.detach();\r\n            this._closingActionsSubscription.unsubscribe();\r\n        }\r\n        // Note that in some cases this can end up being called after the component is destroyed.\r\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n        if (!this._componentDestroyed) {\r\n            // We need to trigger change detection manually, because\r\n            // `fromEvent` doesn't seem to do it at the proper time.\r\n            // This ensures that the label is reset when the\r\n            // user clicks outside.\r\n            this._changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n    /**\r\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n     * within the viewport.\r\n     */\r\n    updatePosition() {\r\n        if (this._overlayAttached) {\r\n            this._overlayRef.updatePosition();\r\n        }\r\n    }\r\n    /**\r\n     * A stream of actions that should close the autocomplete panel, including\r\n     * when an option is selected, on blur, and when TAB is pressed.\r\n     */\r\n    get panelClosingActions() {\r\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\r\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\r\n            : of()).pipe(\r\n        // Normalize the output so we return a consistent type.\r\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\r\n    }\r\n    /** The currently active option, coerced to MatOption type. */\r\n    get activeOption() {\r\n        if (this.autocomplete && this.autocomplete._keyManager) {\r\n            return this.autocomplete._keyManager.activeItem;\r\n        }\r\n        return null;\r\n    }\r\n    /** Stream of clicks outside of the autocomplete panel. */\r\n    _getOutsideClickStream() {\r\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\r\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\r\n            // fall back to check the first element in the path of the click event.\r\n            const clickTarget = _getEventTarget(event);\r\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\r\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\r\n            return (this._overlayAttached &&\r\n                clickTarget !== this._element.nativeElement &&\r\n                // Normally focus moves inside `mousedown` so this condition will almost always be\r\n                // true. Its main purpose is to handle the case where the input is focused from an\r\n                // outside click which propagates up to the `body` listener within the same sequence\r\n                // and causes the panel to close immediately (see #3106).\r\n                this._document.activeElement !== this._element.nativeElement &&\r\n                (!formField || !formField.contains(clickTarget)) &&\r\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\r\n                !!this._overlayRef &&\r\n                !this._overlayRef.overlayElement.contains(clickTarget));\r\n        }));\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        Promise.resolve().then(() => this._setTriggerValue(value));\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this._element.nativeElement.disabled = isDisabled;\r\n    }\r\n    _handleKeydown(event) {\r\n        const keyCode = event.keyCode;\r\n        const hasModifier = hasModifierKey(event);\r\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n        // the input value to the one that it had on focus, however it won't dispatch any events\r\n        // which means that the model value will be out of sync with the view.\r\n        if (keyCode === ESCAPE && !hasModifier) {\r\n            event.preventDefault();\r\n        }\r\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\r\n            this.activeOption._selectViaInteraction();\r\n            this._resetActiveItem();\r\n            event.preventDefault();\r\n        }\r\n        else if (this.autocomplete) {\r\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\r\n                this.autocomplete._keyManager.onKeydown(event);\r\n            }\r\n            else if (isArrowKey && this._canOpen()) {\r\n                this.openPanel();\r\n            }\r\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\r\n            }\r\n        }\r\n    }\r\n    _handleInput(event) {\r\n        let target = event.target;\r\n        let value = target.value;\r\n        // Based on `NumberValueAccessor` from forms.\r\n        if (target.type === 'number') {\r\n            value = value == '' ? null : parseFloat(value);\r\n        }\r\n        // If the input has a placeholder, IE will fire the `input` event on page load,\r\n        // focus and blur, in addition to when the user actually changed the value. To\r\n        // filter out all of the extra events, we save the value on focus and between\r\n        // `input` events, and we check whether it changed.\r\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n        if (this._previousValue !== value) {\r\n            this._previousValue = value;\r\n            this._onChange(value);\r\n            if (this._canOpen() && this._document.activeElement === event.target) {\r\n                this.openPanel();\r\n            }\r\n        }\r\n    }\r\n    _handleFocus() {\r\n        if (!this._canOpenOnNextFocus) {\r\n            this._canOpenOnNextFocus = true;\r\n        }\r\n        else if (this._canOpen()) {\r\n            this._previousValue = this._element.nativeElement.value;\r\n            this._attachOverlay();\r\n            this._floatLabel(true);\r\n        }\r\n    }\r\n    _handleClick() {\r\n        if (this._canOpen() && !this.panelOpen) {\r\n            this.openPanel();\r\n        }\r\n    }\r\n    /**\r\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n     * This causes the value to jump when selecting an option with the mouse.\r\n     * This method manually floats the label until the panel can be closed.\r\n     * @param shouldAnimate Whether the label should be animated when it is floated.\r\n     */\r\n    _floatLabel(shouldAnimate = false) {\r\n        if (this._formField && this._formField.floatLabel === 'auto') {\r\n            if (shouldAnimate) {\r\n                this._formField._animateAndLockLabel();\r\n            }\r\n            else {\r\n                this._formField.floatLabel = 'always';\r\n            }\r\n            this._manuallyFloatingLabel = true;\r\n        }\r\n    }\r\n    /** If the label has been manually elevated, return it to its normal state. */\r\n    _resetLabel() {\r\n        if (this._manuallyFloatingLabel) {\r\n            this._formField.floatLabel = 'auto';\r\n            this._manuallyFloatingLabel = false;\r\n        }\r\n    }\r\n    /**\r\n     * This method listens to a stream of panel closing actions and resets the\r\n     * stream every time the option list changes.\r\n     */\r\n    _subscribeToClosingActions() {\r\n        const firstStable = this._zone.onStable.pipe(take(1));\r\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \r\n        // Defer emitting to the stream until the next tick, because changing\r\n        // bindings in here will cause \"changed after checked\" errors.\r\n        delay(0));\r\n        // When the zone is stable initially, and when the option list changes...\r\n        return (merge(firstStable, optionChanges)\r\n            .pipe(\r\n        // create a new stream of panelClosingActions, replacing any previous streams\r\n        // that were created, and flatten it so our stream only emits closing events...\r\n        switchMap(() => {\r\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\r\n            // the Angular zone. This will lead to change detection being called outside of the Angular\r\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\r\n            this._zone.run(() => {\r\n                const wasOpen = this.panelOpen;\r\n                this._resetActiveItem();\r\n                this.autocomplete._setVisibility();\r\n                this._changeDetectorRef.detectChanges();\r\n                if (this.panelOpen) {\r\n                    this._overlayRef.updatePosition();\r\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened`\r\n                    // event, because we may not have emitted it when the panel was attached. This\r\n                    // can happen if the users opens the panel and there are no options, but the\r\n                    // options come in slightly later or as a result of the value changing.\r\n                    if (wasOpen !== this.panelOpen) {\r\n                        this.autocomplete.opened.emit();\r\n                    }\r\n                }\r\n            });\r\n            return this.panelClosingActions;\r\n        }), \r\n        // when the first closing event occurs...\r\n        take(1))\r\n            // set the value, close the panel, and complete.\r\n            .subscribe(event => this._setValueAndClose(event)));\r\n    }\r\n    /** Destroys the autocomplete suggestion panel. */\r\n    _destroyPanel() {\r\n        if (this._overlayRef) {\r\n            this.closePanel();\r\n            this._overlayRef.dispose();\r\n            this._overlayRef = null;\r\n        }\r\n    }\r\n    _setTriggerValue(value) {\r\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\r\n            ? this.autocomplete.displayWith(value)\r\n            : value;\r\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n        const inputValue = toDisplay != null ? toDisplay : '';\r\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n        // through change detection.\r\n        if (this._formField) {\r\n            this._formField._control.value = inputValue;\r\n        }\r\n        else {\r\n            this._element.nativeElement.value = inputValue;\r\n        }\r\n        this._previousValue = inputValue;\r\n    }\r\n    /**\r\n     * This method closes the panel, and if a value is specified, also sets the associated\r\n     * control to that value. It will also mark the control as dirty if this interaction\r\n     * stemmed from the user.\r\n     */\r\n    _setValueAndClose(event) {\r\n        const source = event && event.source;\r\n        if (source) {\r\n            this._clearPreviousSelectedOption(source);\r\n            this._setTriggerValue(source.value);\r\n            this._onChange(source.value);\r\n            this.autocomplete._emitSelectEvent(source);\r\n            this._element.nativeElement.focus();\r\n        }\r\n        this.closePanel();\r\n    }\r\n    /**\r\n     * Clear any previous selected option and emit a selection change event for this option\r\n     */\r\n    _clearPreviousSelectedOption(skip) {\r\n        this.autocomplete.options.forEach(option => {\r\n            if (option !== skip && option.selected) {\r\n                option.deselect();\r\n            }\r\n        });\r\n    }\r\n    _attachOverlay() {\r\n        var _a;\r\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMatAutocompleteMissingPanelError();\r\n        }\r\n        let overlayRef = this._overlayRef;\r\n        if (!overlayRef) {\r\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\r\n                id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId(),\r\n            });\r\n            overlayRef = this._overlay.create(this._getOverlayConfig());\r\n            this._overlayRef = overlayRef;\r\n            // Use the `keydownEvents` in order to take advantage of\r\n            // the overlay event targeting provided by the CDK overlay.\r\n            overlayRef.keydownEvents().subscribe(event => {\r\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\r\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\r\n                    this._closeKeyEventStream.next();\r\n                    this._resetActiveItem();\r\n                    // We need to stop propagation, otherwise the event will eventually\r\n                    // reach the input itself and cause the overlay to be reopened.\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n            });\r\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\r\n                if (this.panelOpen && overlayRef) {\r\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // Update the trigger, panel width and direction, in case anything has changed.\r\n            this._positionStrategy.setOrigin(this._getConnectedElement());\r\n            overlayRef.updateSize({ width: this._getPanelWidth() });\r\n        }\r\n        if (overlayRef && !overlayRef.hasAttached()) {\r\n            overlayRef.attach(this._portal);\r\n            this._closingActionsSubscription = this._subscribeToClosingActions();\r\n        }\r\n        const wasOpen = this.panelOpen;\r\n        this.autocomplete._setVisibility();\r\n        this.autocomplete._isOpen = this._overlayAttached = true;\r\n        // We need to do an extra `panelOpen` check in here, because the\r\n        // autocomplete won't be shown if there are no options.\r\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\r\n            this.autocomplete.opened.emit();\r\n        }\r\n    }\r\n    _getOverlayConfig() {\r\n        var _a;\r\n        return new OverlayConfig({\r\n            positionStrategy: this._getOverlayPosition(),\r\n            scrollStrategy: this._scrollStrategy(),\r\n            width: this._getPanelWidth(),\r\n            direction: this._dir,\r\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\r\n        });\r\n    }\r\n    _getOverlayPosition() {\r\n        const strategy = this._overlay\r\n            .position()\r\n            .flexibleConnectedTo(this._getConnectedElement())\r\n            .withFlexibleDimensions(false)\r\n            .withPush(false);\r\n        this._setStrategyPositions(strategy);\r\n        this._positionStrategy = strategy;\r\n        return strategy;\r\n    }\r\n    /** Sets the positions on a position strategy based on the directive's input state. */\r\n    _setStrategyPositions(positionStrategy) {\r\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\r\n        // width matches the input, because consumers can override the width. See #18854.\r\n        const belowPositions = [\r\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\r\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\r\n        ];\r\n        // The overlay edge connected to the trigger should have squared corners, while\r\n        // the opposite end has rounded corners. We apply a CSS class to swap the\r\n        // border-radius based on the overlay position.\r\n        const panelClass = this._aboveClass;\r\n        const abovePositions = [\r\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\r\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\r\n        ];\r\n        let positions;\r\n        if (this.position === 'above') {\r\n            positions = abovePositions;\r\n        }\r\n        else if (this.position === 'below') {\r\n            positions = belowPositions;\r\n        }\r\n        else {\r\n            positions = [...belowPositions, ...abovePositions];\r\n        }\r\n        positionStrategy.withPositions(positions);\r\n    }\r\n    _getConnectedElement() {\r\n        if (this.connectedTo) {\r\n            return this.connectedTo.elementRef;\r\n        }\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\r\n    }\r\n    _getPanelWidth() {\r\n        return this.autocomplete.panelWidth || this._getHostWidth();\r\n    }\r\n    /** Returns the width of the input element, so the panel width can match it. */\r\n    _getHostWidth() {\r\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n    }\r\n    /**\r\n     * Resets the active item to -1 so arrow events will activate the\r\n     * correct options, or to 0 if the consumer opted into it.\r\n     */\r\n    _resetActiveItem() {\r\n        const autocomplete = this.autocomplete;\r\n        if (autocomplete.autoActiveFirstOption) {\r\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\r\n            // the former will find the next enabled option, if the first one is disabled.\r\n            autocomplete._keyManager.setFirstItemActive();\r\n        }\r\n        else {\r\n            autocomplete._keyManager.setActiveItem(-1);\r\n        }\r\n    }\r\n    /** Determines whether the panel can be opened. */\r\n    _canOpen() {\r\n        const element = this._element.nativeElement;\r\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\r\n    }\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    _getWindow() {\r\n        var _a;\r\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\r\n    }\r\n    /** Scrolls to a particular option in the list. */\r\n    _scrollToOption(index) {\r\n        // Given that we are not actually focusing active options, we must manually adjust scroll\r\n        // to reveal options below the fold. First, we find the offset of the option from the top\r\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n        // the panel height + the option height, so the active option will be just visible at the\r\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n        // not adjusted.\r\n        const autocomplete = this.autocomplete;\r\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\r\n        if (index === 0 && labelCount === 1) {\r\n            // If we've got one group label before the option and we're at the top option,\r\n            // scroll the list to the top. This is better UX than scrolling the list to the\r\n            // top of the option, because it allows the user to read the top group's label.\r\n            autocomplete._setScrollTop(0);\r\n        }\r\n        else if (autocomplete.panel) {\r\n            const option = autocomplete.options.toArray()[index];\r\n            if (option) {\r\n                const element = option._getHostElement();\r\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\r\n                autocomplete._setScrollTop(newScrollPosition);\r\n            }\r\n        }\r\n    }\r\n}\r\n_MatAutocompleteTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteTriggerBase, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\n_MatAutocompleteTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteTriggerBase, inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"] }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteTriggerBase, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\r\n                    }] }, { type: i2$1.Directionality, decorators: [{\r\n                        type: Optional\r\n                    }] }, { type: i4.MatFormField, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [MAT_FORM_FIELD]\r\n                    }, {\r\n                        type: Host\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [DOCUMENT]\r\n                    }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\r\n                    }] }];\r\n    }, propDecorators: { autocomplete: [{\r\n                type: Input,\r\n                args: ['matAutocomplete']\r\n            }], position: [{\r\n                type: Input,\r\n                args: ['matAutocompletePosition']\r\n            }], connectedTo: [{\r\n                type: Input,\r\n                args: ['matAutocompleteConnectedTo']\r\n            }], autocompleteAttribute: [{\r\n                type: Input,\r\n                args: ['autocomplete']\r\n            }], autocompleteDisabled: [{\r\n                type: Input,\r\n                args: ['matAutocompleteDisabled']\r\n            }] } });\r\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._aboveClass = 'mat-autocomplete-panel-above';\r\n    }\r\n}\r\nMatAutocompleteTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatAutocompleteTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-owns\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n                    host: {\r\n                        'class': 'mat-autocomplete-trigger',\r\n                        '[attr.autocomplete]': 'autocompleteAttribute',\r\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\r\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\r\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\r\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\r\n                        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\r\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\r\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n                        '(focusin)': '_handleFocus()',\r\n                        '(blur)': '_onTouched()',\r\n                        '(input)': '_handleInput($event)',\r\n                        '(keydown)': '_handleKeydown($event)',\r\n                        '(click)': '_handleClick()',\r\n                    },\r\n                    exportAs: 'matAutocompleteTrigger',\r\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\r\nclass _MatAutocompleteOriginBase {\r\n    constructor(\r\n    /** Reference to the element on which the directive is applied. */\r\n    elementRef) {\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\n_MatAutocompleteOriginBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteOriginBase, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\n_MatAutocompleteOriginBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteOriginBase, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteOriginBase, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\r\n/**\r\n * Directive applied to an element to make it usable\r\n * as a connection point for an autocomplete panel.\r\n */\r\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\r\n}\r\nMatAutocompleteOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteOrigin, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatAutocompleteOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matAutocompleteOrigin]',\r\n                    exportAs: 'matAutocompleteOrigin',\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatAutocompleteModule {\r\n}\r\nMatAutocompleteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMatAutocompleteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [MatAutocomplete,\r\n        MatAutocompleteTrigger,\r\n        MatAutocompleteOrigin,\r\n        CdkScrollableModule,\r\n        MatOptionModule,\r\n        MatCommonModule] });\r\nMatAutocompleteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule,\r\n        MatOptionModule,\r\n        MatCommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\r\n                    exports: [\r\n                        MatAutocomplete,\r\n                        MatAutocompleteTrigger,\r\n                        MatAutocompleteOrigin,\r\n                        CdkScrollableModule,\r\n                        MatOptionModule,\r\n                        MatCommonModule,\r\n                    ],\r\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\r\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\r\n\n"]},"metadata":{},"sourceType":"module"}